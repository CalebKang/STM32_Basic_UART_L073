
STM32_Basic_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080026b8  080026b8  000126b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002798  08002798  00012798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080027a0  080027a0  000127a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080027a4  080027a4  000127a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  20000000  080027a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b0  20000068  08002810  00020068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000118  08002810  00020118  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 10 .debug_info   000064ce  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000152a  00000000  00000000  0002655e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002ac2  00000000  00000000  00027a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000578  00000000  00000000  0002a550  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000006a0  00000000  00000000  0002aac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00002f8c  00000000  00000000  0002b168  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001fcc  00000000  00000000  0002e0f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000015a8  00000000  00000000  0003013c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000084  00000000  00000000  000316e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000117  00000000  00000000  00031768  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080026a0 	.word	0x080026a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080026a0 	.word	0x080026a0

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uldivmod>:
 8000248:	2b00      	cmp	r3, #0
 800024a:	d111      	bne.n	8000270 <__aeabi_uldivmod+0x28>
 800024c:	2a00      	cmp	r2, #0
 800024e:	d10f      	bne.n	8000270 <__aeabi_uldivmod+0x28>
 8000250:	2900      	cmp	r1, #0
 8000252:	d100      	bne.n	8000256 <__aeabi_uldivmod+0xe>
 8000254:	2800      	cmp	r0, #0
 8000256:	d002      	beq.n	800025e <__aeabi_uldivmod+0x16>
 8000258:	2100      	movs	r1, #0
 800025a:	43c9      	mvns	r1, r1
 800025c:	1c08      	adds	r0, r1, #0
 800025e:	b407      	push	{r0, r1, r2}
 8000260:	4802      	ldr	r0, [pc, #8]	; (800026c <__aeabi_uldivmod+0x24>)
 8000262:	a102      	add	r1, pc, #8	; (adr r1, 800026c <__aeabi_uldivmod+0x24>)
 8000264:	1840      	adds	r0, r0, r1
 8000266:	9002      	str	r0, [sp, #8]
 8000268:	bd03      	pop	{r0, r1, pc}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	ffffffd9 	.word	0xffffffd9
 8000270:	b403      	push	{r0, r1}
 8000272:	4668      	mov	r0, sp
 8000274:	b501      	push	{r0, lr}
 8000276:	9802      	ldr	r0, [sp, #8]
 8000278:	f000 f806 	bl	8000288 <__udivmoddi4>
 800027c:	9b01      	ldr	r3, [sp, #4]
 800027e:	469e      	mov	lr, r3
 8000280:	b002      	add	sp, #8
 8000282:	bc0c      	pop	{r2, r3}
 8000284:	4770      	bx	lr
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__udivmoddi4>:
 8000288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800028a:	4657      	mov	r7, sl
 800028c:	464e      	mov	r6, r9
 800028e:	4645      	mov	r5, r8
 8000290:	46de      	mov	lr, fp
 8000292:	b5e0      	push	{r5, r6, r7, lr}
 8000294:	0004      	movs	r4, r0
 8000296:	b083      	sub	sp, #12
 8000298:	000d      	movs	r5, r1
 800029a:	4692      	mov	sl, r2
 800029c:	4699      	mov	r9, r3
 800029e:	428b      	cmp	r3, r1
 80002a0:	d82f      	bhi.n	8000302 <__udivmoddi4+0x7a>
 80002a2:	d02c      	beq.n	80002fe <__udivmoddi4+0x76>
 80002a4:	4649      	mov	r1, r9
 80002a6:	4650      	mov	r0, sl
 80002a8:	f000 f8ae 	bl	8000408 <__clzdi2>
 80002ac:	0029      	movs	r1, r5
 80002ae:	0006      	movs	r6, r0
 80002b0:	0020      	movs	r0, r4
 80002b2:	f000 f8a9 	bl	8000408 <__clzdi2>
 80002b6:	1a33      	subs	r3, r6, r0
 80002b8:	4698      	mov	r8, r3
 80002ba:	3b20      	subs	r3, #32
 80002bc:	469b      	mov	fp, r3
 80002be:	d500      	bpl.n	80002c2 <__udivmoddi4+0x3a>
 80002c0:	e074      	b.n	80003ac <__udivmoddi4+0x124>
 80002c2:	4653      	mov	r3, sl
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	001f      	movs	r7, r3
 80002ca:	4653      	mov	r3, sl
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	001e      	movs	r6, r3
 80002d2:	42af      	cmp	r7, r5
 80002d4:	d829      	bhi.n	800032a <__udivmoddi4+0xa2>
 80002d6:	d026      	beq.n	8000326 <__udivmoddi4+0x9e>
 80002d8:	465b      	mov	r3, fp
 80002da:	1ba4      	subs	r4, r4, r6
 80002dc:	41bd      	sbcs	r5, r7
 80002de:	2b00      	cmp	r3, #0
 80002e0:	da00      	bge.n	80002e4 <__udivmoddi4+0x5c>
 80002e2:	e079      	b.n	80003d8 <__udivmoddi4+0x150>
 80002e4:	2200      	movs	r2, #0
 80002e6:	2300      	movs	r3, #0
 80002e8:	9200      	str	r2, [sp, #0]
 80002ea:	9301      	str	r3, [sp, #4]
 80002ec:	2301      	movs	r3, #1
 80002ee:	465a      	mov	r2, fp
 80002f0:	4093      	lsls	r3, r2
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	2301      	movs	r3, #1
 80002f6:	4642      	mov	r2, r8
 80002f8:	4093      	lsls	r3, r2
 80002fa:	9300      	str	r3, [sp, #0]
 80002fc:	e019      	b.n	8000332 <__udivmoddi4+0xaa>
 80002fe:	4282      	cmp	r2, r0
 8000300:	d9d0      	bls.n	80002a4 <__udivmoddi4+0x1c>
 8000302:	2200      	movs	r2, #0
 8000304:	2300      	movs	r3, #0
 8000306:	9200      	str	r2, [sp, #0]
 8000308:	9301      	str	r3, [sp, #4]
 800030a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <__udivmoddi4+0x8c>
 8000310:	601c      	str	r4, [r3, #0]
 8000312:	605d      	str	r5, [r3, #4]
 8000314:	9800      	ldr	r0, [sp, #0]
 8000316:	9901      	ldr	r1, [sp, #4]
 8000318:	b003      	add	sp, #12
 800031a:	bc3c      	pop	{r2, r3, r4, r5}
 800031c:	4690      	mov	r8, r2
 800031e:	4699      	mov	r9, r3
 8000320:	46a2      	mov	sl, r4
 8000322:	46ab      	mov	fp, r5
 8000324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000326:	42a3      	cmp	r3, r4
 8000328:	d9d6      	bls.n	80002d8 <__udivmoddi4+0x50>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	4643      	mov	r3, r8
 8000334:	2b00      	cmp	r3, #0
 8000336:	d0e8      	beq.n	800030a <__udivmoddi4+0x82>
 8000338:	07fb      	lsls	r3, r7, #31
 800033a:	0872      	lsrs	r2, r6, #1
 800033c:	431a      	orrs	r2, r3
 800033e:	4646      	mov	r6, r8
 8000340:	087b      	lsrs	r3, r7, #1
 8000342:	e00e      	b.n	8000362 <__udivmoddi4+0xda>
 8000344:	42ab      	cmp	r3, r5
 8000346:	d101      	bne.n	800034c <__udivmoddi4+0xc4>
 8000348:	42a2      	cmp	r2, r4
 800034a:	d80c      	bhi.n	8000366 <__udivmoddi4+0xde>
 800034c:	1aa4      	subs	r4, r4, r2
 800034e:	419d      	sbcs	r5, r3
 8000350:	2001      	movs	r0, #1
 8000352:	1924      	adds	r4, r4, r4
 8000354:	416d      	adcs	r5, r5
 8000356:	2100      	movs	r1, #0
 8000358:	3e01      	subs	r6, #1
 800035a:	1824      	adds	r4, r4, r0
 800035c:	414d      	adcs	r5, r1
 800035e:	2e00      	cmp	r6, #0
 8000360:	d006      	beq.n	8000370 <__udivmoddi4+0xe8>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d9ee      	bls.n	8000344 <__udivmoddi4+0xbc>
 8000366:	3e01      	subs	r6, #1
 8000368:	1924      	adds	r4, r4, r4
 800036a:	416d      	adcs	r5, r5
 800036c:	2e00      	cmp	r6, #0
 800036e:	d1f8      	bne.n	8000362 <__udivmoddi4+0xda>
 8000370:	465b      	mov	r3, fp
 8000372:	9800      	ldr	r0, [sp, #0]
 8000374:	9901      	ldr	r1, [sp, #4]
 8000376:	1900      	adds	r0, r0, r4
 8000378:	4169      	adcs	r1, r5
 800037a:	2b00      	cmp	r3, #0
 800037c:	db22      	blt.n	80003c4 <__udivmoddi4+0x13c>
 800037e:	002b      	movs	r3, r5
 8000380:	465a      	mov	r2, fp
 8000382:	40d3      	lsrs	r3, r2
 8000384:	002a      	movs	r2, r5
 8000386:	4644      	mov	r4, r8
 8000388:	40e2      	lsrs	r2, r4
 800038a:	001c      	movs	r4, r3
 800038c:	465b      	mov	r3, fp
 800038e:	0015      	movs	r5, r2
 8000390:	2b00      	cmp	r3, #0
 8000392:	db2c      	blt.n	80003ee <__udivmoddi4+0x166>
 8000394:	0026      	movs	r6, r4
 8000396:	409e      	lsls	r6, r3
 8000398:	0033      	movs	r3, r6
 800039a:	0026      	movs	r6, r4
 800039c:	4647      	mov	r7, r8
 800039e:	40be      	lsls	r6, r7
 80003a0:	0032      	movs	r2, r6
 80003a2:	1a80      	subs	r0, r0, r2
 80003a4:	4199      	sbcs	r1, r3
 80003a6:	9000      	str	r0, [sp, #0]
 80003a8:	9101      	str	r1, [sp, #4]
 80003aa:	e7ae      	b.n	800030a <__udivmoddi4+0x82>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	1a9b      	subs	r3, r3, r2
 80003b2:	4652      	mov	r2, sl
 80003b4:	40da      	lsrs	r2, r3
 80003b6:	4641      	mov	r1, r8
 80003b8:	0013      	movs	r3, r2
 80003ba:	464a      	mov	r2, r9
 80003bc:	408a      	lsls	r2, r1
 80003be:	0017      	movs	r7, r2
 80003c0:	431f      	orrs	r7, r3
 80003c2:	e782      	b.n	80002ca <__udivmoddi4+0x42>
 80003c4:	4642      	mov	r2, r8
 80003c6:	2320      	movs	r3, #32
 80003c8:	1a9b      	subs	r3, r3, r2
 80003ca:	002a      	movs	r2, r5
 80003cc:	4646      	mov	r6, r8
 80003ce:	409a      	lsls	r2, r3
 80003d0:	0023      	movs	r3, r4
 80003d2:	40f3      	lsrs	r3, r6
 80003d4:	4313      	orrs	r3, r2
 80003d6:	e7d5      	b.n	8000384 <__udivmoddi4+0xfc>
 80003d8:	4642      	mov	r2, r8
 80003da:	2320      	movs	r3, #32
 80003dc:	2100      	movs	r1, #0
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	9100      	str	r1, [sp, #0]
 80003e4:	9201      	str	r2, [sp, #4]
 80003e6:	2201      	movs	r2, #1
 80003e8:	40da      	lsrs	r2, r3
 80003ea:	9201      	str	r2, [sp, #4]
 80003ec:	e782      	b.n	80002f4 <__udivmoddi4+0x6c>
 80003ee:	4642      	mov	r2, r8
 80003f0:	2320      	movs	r3, #32
 80003f2:	0026      	movs	r6, r4
 80003f4:	1a9b      	subs	r3, r3, r2
 80003f6:	40de      	lsrs	r6, r3
 80003f8:	002f      	movs	r7, r5
 80003fa:	46b4      	mov	ip, r6
 80003fc:	4097      	lsls	r7, r2
 80003fe:	4666      	mov	r6, ip
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7c9      	b.n	800039a <__udivmoddi4+0x112>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	1c08      	adds	r0, r1, #0
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800045c:	21fa      	movs	r1, #250	; 0xfa
 800045e:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <HAL_InitTick+0x2c>)
{
 8000460:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000462:	0089      	lsls	r1, r1, #2
{
 8000464:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000466:	6818      	ldr	r0, [r3, #0]
 8000468:	f7ff fe62 	bl	8000130 <__udivsi3>
 800046c:	f000 f870 	bl	8000550 <HAL_SYSTICK_Config>
 8000470:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 8000472:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000474:	2c00      	cmp	r4, #0
 8000476:	d105      	bne.n	8000484 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000478:	3802      	subs	r0, #2
 800047a:	0022      	movs	r2, r4
 800047c:	0029      	movs	r1, r5
 800047e:	f000 f837 	bl	80004f0 <HAL_NVIC_SetPriority>
 8000482:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	20000000 	.word	0x20000000

0800048c <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800048c:	2340      	movs	r3, #64	; 0x40
 800048e:	4a08      	ldr	r2, [pc, #32]	; (80004b0 <HAL_Init+0x24>)
{
 8000490:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000492:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000494:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000496:	430b      	orrs	r3, r1
 8000498:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800049a:	f7ff ffdf 	bl	800045c <HAL_InitTick>
 800049e:	1e04      	subs	r4, r0, #0
 80004a0:	d103      	bne.n	80004aa <HAL_Init+0x1e>
    HAL_MspInit();
 80004a2:	f001 f8cb 	bl	800163c <HAL_MspInit>
}
 80004a6:	0020      	movs	r0, r4
 80004a8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80004aa:	2401      	movs	r4, #1
 80004ac:	e7fb      	b.n	80004a6 <HAL_Init+0x1a>
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	40022000 	.word	0x40022000

080004b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80004b4:	4a02      	ldr	r2, [pc, #8]	; (80004c0 <HAL_IncTick+0xc>)
 80004b6:	6813      	ldr	r3, [r2, #0]
 80004b8:	3301      	adds	r3, #1
 80004ba:	6013      	str	r3, [r2, #0]
}
 80004bc:	4770      	bx	lr
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	20000090 	.word	0x20000090

080004c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004c4:	4b01      	ldr	r3, [pc, #4]	; (80004cc <HAL_GetTick+0x8>)
 80004c6:	6818      	ldr	r0, [r3, #0]
}
 80004c8:	4770      	bx	lr
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	20000090 	.word	0x20000090

080004d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80004d4:	f7ff fff6 	bl	80004c4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 80004d8:	1c63      	adds	r3, r4, #1
 80004da:	1e5a      	subs	r2, r3, #1
 80004dc:	4193      	sbcs	r3, r2
  uint32_t tickstart = HAL_GetTick();
 80004de:	0005      	movs	r5, r0
    wait++;
 80004e0:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80004e2:	f7ff ffef 	bl	80004c4 <HAL_GetTick>
 80004e6:	1b40      	subs	r0, r0, r5
 80004e8:	4284      	cmp	r4, r0
 80004ea:	d8fa      	bhi.n	80004e2 <HAL_Delay+0x12>
  {
  }
}
 80004ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080004f0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80004f4:	2800      	cmp	r0, #0
 80004f6:	da14      	bge.n	8000522 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f8:	230f      	movs	r3, #15
 80004fa:	b2c0      	uxtb	r0, r0
 80004fc:	4003      	ands	r3, r0
 80004fe:	3b08      	subs	r3, #8
 8000500:	4a11      	ldr	r2, [pc, #68]	; (8000548 <HAL_NVIC_SetPriority+0x58>)
 8000502:	089b      	lsrs	r3, r3, #2
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	189b      	adds	r3, r3, r2
 8000508:	2203      	movs	r2, #3
 800050a:	4010      	ands	r0, r2
 800050c:	4090      	lsls	r0, r2
 800050e:	32fc      	adds	r2, #252	; 0xfc
 8000510:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000512:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000514:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000516:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000518:	69dc      	ldr	r4, [r3, #28]
 800051a:	43ac      	bics	r4, r5
 800051c:	4321      	orrs	r1, r4
 800051e:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000520:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000522:	2503      	movs	r5, #3
 8000524:	0883      	lsrs	r3, r0, #2
 8000526:	4028      	ands	r0, r5
 8000528:	40a8      	lsls	r0, r5
 800052a:	35fc      	adds	r5, #252	; 0xfc
 800052c:	002e      	movs	r6, r5
 800052e:	4a07      	ldr	r2, [pc, #28]	; (800054c <HAL_NVIC_SetPriority+0x5c>)
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	189b      	adds	r3, r3, r2
 8000534:	22c0      	movs	r2, #192	; 0xc0
 8000536:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000538:	4029      	ands	r1, r5
 800053a:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800053c:	0092      	lsls	r2, r2, #2
 800053e:	589c      	ldr	r4, [r3, r2]
 8000540:	43b4      	bics	r4, r6
 8000542:	4321      	orrs	r1, r4
 8000544:	5099      	str	r1, [r3, r2]
 8000546:	e7eb      	b.n	8000520 <HAL_NVIC_SetPriority+0x30>
 8000548:	e000ed00 	.word	0xe000ed00
 800054c:	e000e100 	.word	0xe000e100

08000550 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000550:	4a09      	ldr	r2, [pc, #36]	; (8000578 <HAL_SYSTICK_Config+0x28>)
 8000552:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000554:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000556:	4293      	cmp	r3, r2
 8000558:	d80d      	bhi.n	8000576 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800055a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800055c:	4a07      	ldr	r2, [pc, #28]	; (800057c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800055e:	4808      	ldr	r0, [pc, #32]	; (8000580 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000560:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000562:	6a03      	ldr	r3, [r0, #32]
 8000564:	0609      	lsls	r1, r1, #24
 8000566:	021b      	lsls	r3, r3, #8
 8000568:	0a1b      	lsrs	r3, r3, #8
 800056a:	430b      	orrs	r3, r1
 800056c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800056e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000570:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000572:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000574:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000576:	4770      	bx	lr
 8000578:	00ffffff 	.word	0x00ffffff
 800057c:	e000e010 	.word	0xe000e010
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000586:	4a55      	ldr	r2, [pc, #340]	; (80006dc <HAL_GPIO_Init+0x158>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000588:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800058a:	1882      	adds	r2, r0, r2
 800058c:	1e54      	subs	r4, r2, #1
 800058e:	41a2      	sbcs	r2, r4
{
 8000590:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8000592:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 8000594:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000596:	3205      	adds	r2, #5
 8000598:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 800059a:	9a01      	ldr	r2, [sp, #4]
 800059c:	40da      	lsrs	r2, r3
 800059e:	d101      	bne.n	80005a4 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 80005a0:	b005      	add	sp, #20
 80005a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80005a4:	2501      	movs	r5, #1
 80005a6:	409d      	lsls	r5, r3
 80005a8:	9a01      	ldr	r2, [sp, #4]
 80005aa:	402a      	ands	r2, r5
 80005ac:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 80005ae:	d100      	bne.n	80005b2 <HAL_GPIO_Init+0x2e>
 80005b0:	e091      	b.n	80006d6 <HAL_GPIO_Init+0x152>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80005b2:	684a      	ldr	r2, [r1, #4]
 80005b4:	4694      	mov	ip, r2
 80005b6:	2210      	movs	r2, #16
 80005b8:	4664      	mov	r4, ip
 80005ba:	4394      	bics	r4, r2
 80005bc:	0022      	movs	r2, r4
 80005be:	3c01      	subs	r4, #1
 80005c0:	2a02      	cmp	r2, #2
 80005c2:	d11f      	bne.n	8000604 <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80005c4:	2407      	movs	r4, #7
 80005c6:	270f      	movs	r7, #15
 80005c8:	401c      	ands	r4, r3
 80005ca:	00a4      	lsls	r4, r4, #2
 80005cc:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 80005ce:	08da      	lsrs	r2, r3, #3
 80005d0:	0092      	lsls	r2, r2, #2
 80005d2:	1882      	adds	r2, r0, r2
 80005d4:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80005d6:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80005d8:	690f      	ldr	r7, [r1, #16]
 80005da:	40a7      	lsls	r7, r4
 80005dc:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80005de:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80005e0:	2403      	movs	r4, #3
 80005e2:	005e      	lsls	r6, r3, #1
 80005e4:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 80005e6:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80005e8:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80005ea:	68cc      	ldr	r4, [r1, #12]
 80005ec:	40b4      	lsls	r4, r6
 80005ee:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 80005f0:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005f2:	4662      	mov	r2, ip
 80005f4:	06d2      	lsls	r2, r2, #27
 80005f6:	0fd2      	lsrs	r2, r2, #31
 80005f8:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 80005fa:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005fc:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005fe:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000600:	6042      	str	r2, [r0, #4]
 8000602:	e001      	b.n	8000608 <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000604:	2c01      	cmp	r4, #1
 8000606:	d9eb      	bls.n	80005e0 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000608:	2603      	movs	r6, #3
 800060a:	0034      	movs	r4, r6
 800060c:	005d      	lsls	r5, r3, #1
 800060e:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000610:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000612:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000614:	4032      	ands	r2, r6
 8000616:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 8000618:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800061a:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800061c:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 800061e:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 8000620:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000622:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000624:	688a      	ldr	r2, [r1, #8]
 8000626:	40aa      	lsls	r2, r5
 8000628:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800062a:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 800062c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800062e:	00d2      	lsls	r2, r2, #3
 8000630:	d551      	bpl.n	80006d6 <HAL_GPIO_Init+0x152>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000632:	2501      	movs	r5, #1
 8000634:	4c2a      	ldr	r4, [pc, #168]	; (80006e0 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000636:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000638:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800063a:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800063c:	001d      	movs	r5, r3
 800063e:	4035      	ands	r5, r6
 8000640:	00ad      	lsls	r5, r5, #2
 8000642:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000644:	6362      	str	r2, [r4, #52]	; 0x34
 8000646:	4a27      	ldr	r2, [pc, #156]	; (80006e4 <HAL_GPIO_Init+0x160>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000648:	089c      	lsrs	r4, r3, #2
 800064a:	00a4      	lsls	r4, r4, #2
 800064c:	18a4      	adds	r4, r4, r2
 800064e:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000650:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000652:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000654:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000656:	05ff      	lsls	r7, r7, #23
 8000658:	2200      	movs	r2, #0
 800065a:	42b8      	cmp	r0, r7
 800065c:	d010      	beq.n	8000680 <HAL_GPIO_Init+0xfc>
 800065e:	4f22      	ldr	r7, [pc, #136]	; (80006e8 <HAL_GPIO_Init+0x164>)
 8000660:	3201      	adds	r2, #1
 8000662:	42b8      	cmp	r0, r7
 8000664:	d00c      	beq.n	8000680 <HAL_GPIO_Init+0xfc>
 8000666:	4f21      	ldr	r7, [pc, #132]	; (80006ec <HAL_GPIO_Init+0x168>)
 8000668:	3201      	adds	r2, #1
 800066a:	42b8      	cmp	r0, r7
 800066c:	d008      	beq.n	8000680 <HAL_GPIO_Init+0xfc>
 800066e:	4f20      	ldr	r7, [pc, #128]	; (80006f0 <HAL_GPIO_Init+0x16c>)
 8000670:	0032      	movs	r2, r6
 8000672:	42b8      	cmp	r0, r7
 8000674:	d004      	beq.n	8000680 <HAL_GPIO_Init+0xfc>
 8000676:	4e1f      	ldr	r6, [pc, #124]	; (80006f4 <HAL_GPIO_Init+0x170>)
 8000678:	3201      	adds	r2, #1
 800067a:	42b0      	cmp	r0, r6
 800067c:	d000      	beq.n	8000680 <HAL_GPIO_Init+0xfc>
 800067e:	9a03      	ldr	r2, [sp, #12]
 8000680:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000682:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000684:	9d02      	ldr	r5, [sp, #8]
 8000686:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000688:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 800068a:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <HAL_GPIO_Init+0x174>)
        temp &= ~((uint32_t)iocurrent);
 800068c:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 800068e:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000690:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 8000692:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000694:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000696:	03ff      	lsls	r7, r7, #15
 8000698:	d401      	bmi.n	800069e <HAL_GPIO_Init+0x11a>
        temp &= ~((uint32_t)iocurrent);
 800069a:	0035      	movs	r5, r6
 800069c:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800069e:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 80006a0:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80006a2:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80006a4:	9d00      	ldr	r5, [sp, #0]
 80006a6:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006a8:	03bf      	lsls	r7, r7, #14
 80006aa:	d401      	bmi.n	80006b0 <HAL_GPIO_Init+0x12c>
        temp &= ~((uint32_t)iocurrent);
 80006ac:	0035      	movs	r5, r6
 80006ae:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006b0:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80006b2:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80006b4:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80006b6:	9d00      	ldr	r5, [sp, #0]
 80006b8:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006ba:	02ff      	lsls	r7, r7, #11
 80006bc:	d401      	bmi.n	80006c2 <HAL_GPIO_Init+0x13e>
        temp &= ~((uint32_t)iocurrent);
 80006be:	0035      	movs	r5, r6
 80006c0:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006c2:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 80006c4:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80006c6:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80006c8:	9e00      	ldr	r6, [sp, #0]
 80006ca:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006cc:	02bf      	lsls	r7, r7, #10
 80006ce:	d401      	bmi.n	80006d4 <HAL_GPIO_Init+0x150>
        temp &= ~((uint32_t)iocurrent);
 80006d0:	4025      	ands	r5, r4
 80006d2:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80006d4:	60d6      	str	r6, [r2, #12]
    position++;
 80006d6:	3301      	adds	r3, #1
 80006d8:	e75f      	b.n	800059a <HAL_GPIO_Init+0x16>
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	afffe400 	.word	0xafffe400
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40010000 	.word	0x40010000
 80006e8:	50000400 	.word	0x50000400
 80006ec:	50000800 	.word	0x50000800
 80006f0:	50000c00 	.word	0x50000c00
 80006f4:	50001000 	.word	0x50001000
 80006f8:	40010400 	.word	0x40010400

080006fc <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80006fc:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8000700:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000702:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000704:	400a      	ands	r2, r1
 8000706:	2a08      	cmp	r2, #8
 8000708:	d026      	beq.n	8000758 <HAL_RCC_GetSysClockFreq+0x5c>
 800070a:	2a0c      	cmp	r2, #12
 800070c:	d006      	beq.n	800071c <HAL_RCC_GetSysClockFreq+0x20>
 800070e:	2a04      	cmp	r2, #4
 8000710:	d11a      	bne.n	8000748 <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	06db      	lsls	r3, r3, #27
 8000716:	d421      	bmi.n	800075c <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8000718:	4812      	ldr	r0, [pc, #72]	; (8000764 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 800071a:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800071c:	028a      	lsls	r2, r1, #10
 800071e:	4812      	ldr	r0, [pc, #72]	; (8000768 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000720:	0f12      	lsrs	r2, r2, #28
 8000722:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000724:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000726:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000728:	0f89      	lsrs	r1, r1, #30
 800072a:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800072c:	03c0      	lsls	r0, r0, #15
 800072e:	d504      	bpl.n	800073a <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8000730:	480e      	ldr	r0, [pc, #56]	; (800076c <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000732:	4350      	muls	r0, r2
 8000734:	f7ff fcfc 	bl	8000130 <__udivsi3>
 8000738:	e7ef      	b.n	800071a <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	06db      	lsls	r3, r3, #27
 800073e:	d501      	bpl.n	8000744 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000740:	480b      	ldr	r0, [pc, #44]	; (8000770 <HAL_RCC_GetSysClockFreq+0x74>)
 8000742:	e7f6      	b.n	8000732 <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8000744:	4807      	ldr	r0, [pc, #28]	; (8000764 <HAL_RCC_GetSysClockFreq+0x68>)
 8000746:	e7f4      	b.n	8000732 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000748:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800074a:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800074c:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800074e:	041b      	lsls	r3, r3, #16
 8000750:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000752:	3301      	adds	r3, #1
 8000754:	4098      	lsls	r0, r3
 8000756:	e7e0      	b.n	800071a <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <HAL_RCC_GetSysClockFreq+0x70>)
 800075a:	e7de      	b.n	800071a <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 800075e:	e7dc      	b.n	800071a <HAL_RCC_GetSysClockFreq+0x1e>
 8000760:	40021000 	.word	0x40021000
 8000764:	00f42400 	.word	0x00f42400
 8000768:	080026f5 	.word	0x080026f5
 800076c:	007a1200 	.word	0x007a1200
 8000770:	003d0900 	.word	0x003d0900

08000774 <HAL_RCC_OscConfig>:
{
 8000774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000776:	0005      	movs	r5, r0
 8000778:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 800077a:	2800      	cmp	r0, #0
 800077c:	d102      	bne.n	8000784 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 800077e:	2001      	movs	r0, #1
}
 8000780:	b007      	add	sp, #28
 8000782:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000784:	230c      	movs	r3, #12
 8000786:	4cc2      	ldr	r4, [pc, #776]	; (8000a90 <HAL_RCC_OscConfig+0x31c>)
 8000788:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800078a:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800078c:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800078e:	2380      	movs	r3, #128	; 0x80
 8000790:	025b      	lsls	r3, r3, #9
 8000792:	401a      	ands	r2, r3
 8000794:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000796:	6802      	ldr	r2, [r0, #0]
 8000798:	07d2      	lsls	r2, r2, #31
 800079a:	d441      	bmi.n	8000820 <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800079c:	682b      	ldr	r3, [r5, #0]
 800079e:	079b      	lsls	r3, r3, #30
 80007a0:	d500      	bpl.n	80007a4 <HAL_RCC_OscConfig+0x30>
 80007a2:	e087      	b.n	80008b4 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80007a4:	682b      	ldr	r3, [r5, #0]
 80007a6:	06db      	lsls	r3, r3, #27
 80007a8:	d528      	bpl.n	80007fc <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80007aa:	2e00      	cmp	r6, #0
 80007ac:	d000      	beq.n	80007b0 <HAL_RCC_OscConfig+0x3c>
 80007ae:	e0e1      	b.n	8000974 <HAL_RCC_OscConfig+0x200>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80007b0:	6823      	ldr	r3, [r4, #0]
 80007b2:	059b      	lsls	r3, r3, #22
 80007b4:	d502      	bpl.n	80007bc <HAL_RCC_OscConfig+0x48>
 80007b6:	69eb      	ldr	r3, [r5, #28]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d0e0      	beq.n	800077e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80007bc:	6862      	ldr	r2, [r4, #4]
 80007be:	49b5      	ldr	r1, [pc, #724]	; (8000a94 <HAL_RCC_OscConfig+0x320>)
 80007c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80007c2:	400a      	ands	r2, r1
 80007c4:	431a      	orrs	r2, r3
 80007c6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80007c8:	6861      	ldr	r1, [r4, #4]
 80007ca:	6a2a      	ldr	r2, [r5, #32]
 80007cc:	0209      	lsls	r1, r1, #8
 80007ce:	0a09      	lsrs	r1, r1, #8
 80007d0:	0612      	lsls	r2, r2, #24
 80007d2:	430a      	orrs	r2, r1
 80007d4:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80007d6:	2280      	movs	r2, #128	; 0x80
 80007d8:	0b5b      	lsrs	r3, r3, #13
 80007da:	3301      	adds	r3, #1
 80007dc:	0212      	lsls	r2, r2, #8
 80007de:	409a      	lsls	r2, r3
 80007e0:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80007e2:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80007e4:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80007e6:	060a      	lsls	r2, r1, #24
 80007e8:	49ab      	ldr	r1, [pc, #684]	; (8000a98 <HAL_RCC_OscConfig+0x324>)
 80007ea:	0f12      	lsrs	r2, r2, #28
 80007ec:	5c8a      	ldrb	r2, [r1, r2]
 80007ee:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80007f0:	4aaa      	ldr	r2, [pc, #680]	; (8000a9c <HAL_RCC_OscConfig+0x328>)
 80007f2:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80007f4:	f7ff fe32 	bl	800045c <HAL_InitTick>
        if(status != HAL_OK)
 80007f8:	2800      	cmp	r0, #0
 80007fa:	d1c1      	bne.n	8000780 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80007fc:	682b      	ldr	r3, [r5, #0]
 80007fe:	071b      	lsls	r3, r3, #28
 8000800:	d500      	bpl.n	8000804 <HAL_RCC_OscConfig+0x90>
 8000802:	e0ee      	b.n	80009e2 <HAL_RCC_OscConfig+0x26e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000804:	682b      	ldr	r3, [r5, #0]
 8000806:	075b      	lsls	r3, r3, #29
 8000808:	d500      	bpl.n	800080c <HAL_RCC_OscConfig+0x98>
 800080a:	e110      	b.n	8000a2e <HAL_RCC_OscConfig+0x2ba>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800080c:	682b      	ldr	r3, [r5, #0]
 800080e:	069b      	lsls	r3, r3, #26
 8000810:	d500      	bpl.n	8000814 <HAL_RCC_OscConfig+0xa0>
 8000812:	e195      	b.n	8000b40 <HAL_RCC_OscConfig+0x3cc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000814:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000816:	2b00      	cmp	r3, #0
 8000818:	d000      	beq.n	800081c <HAL_RCC_OscConfig+0xa8>
 800081a:	e1c4      	b.n	8000ba6 <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 800081c:	2000      	movs	r0, #0
 800081e:	e7af      	b.n	8000780 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000820:	2e08      	cmp	r6, #8
 8000822:	d004      	beq.n	800082e <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000824:	2e0c      	cmp	r6, #12
 8000826:	d109      	bne.n	800083c <HAL_RCC_OscConfig+0xc8>
 8000828:	9a01      	ldr	r2, [sp, #4]
 800082a:	2a00      	cmp	r2, #0
 800082c:	d006      	beq.n	800083c <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800082e:	6823      	ldr	r3, [r4, #0]
 8000830:	039b      	lsls	r3, r3, #14
 8000832:	d5b3      	bpl.n	800079c <HAL_RCC_OscConfig+0x28>
 8000834:	686b      	ldr	r3, [r5, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d1b0      	bne.n	800079c <HAL_RCC_OscConfig+0x28>
 800083a:	e7a0      	b.n	800077e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800083c:	686a      	ldr	r2, [r5, #4]
 800083e:	429a      	cmp	r2, r3
 8000840:	d111      	bne.n	8000866 <HAL_RCC_OscConfig+0xf2>
 8000842:	6822      	ldr	r2, [r4, #0]
 8000844:	4313      	orrs	r3, r2
 8000846:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000848:	f7ff fe3c 	bl	80004c4 <HAL_GetTick>
 800084c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800084e:	2280      	movs	r2, #128	; 0x80
 8000850:	6823      	ldr	r3, [r4, #0]
 8000852:	0292      	lsls	r2, r2, #10
 8000854:	4213      	tst	r3, r2
 8000856:	d1a1      	bne.n	800079c <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000858:	f7ff fe34 	bl	80004c4 <HAL_GetTick>
 800085c:	1bc0      	subs	r0, r0, r7
 800085e:	2864      	cmp	r0, #100	; 0x64
 8000860:	d9f5      	bls.n	800084e <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 8000862:	2003      	movs	r0, #3
 8000864:	e78c      	b.n	8000780 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000866:	21a0      	movs	r1, #160	; 0xa0
 8000868:	02c9      	lsls	r1, r1, #11
 800086a:	428a      	cmp	r2, r1
 800086c:	d105      	bne.n	800087a <HAL_RCC_OscConfig+0x106>
 800086e:	2280      	movs	r2, #128	; 0x80
 8000870:	6821      	ldr	r1, [r4, #0]
 8000872:	02d2      	lsls	r2, r2, #11
 8000874:	430a      	orrs	r2, r1
 8000876:	6022      	str	r2, [r4, #0]
 8000878:	e7e3      	b.n	8000842 <HAL_RCC_OscConfig+0xce>
 800087a:	6821      	ldr	r1, [r4, #0]
 800087c:	4888      	ldr	r0, [pc, #544]	; (8000aa0 <HAL_RCC_OscConfig+0x32c>)
 800087e:	4001      	ands	r1, r0
 8000880:	6021      	str	r1, [r4, #0]
 8000882:	6821      	ldr	r1, [r4, #0]
 8000884:	400b      	ands	r3, r1
 8000886:	9305      	str	r3, [sp, #20]
 8000888:	9b05      	ldr	r3, [sp, #20]
 800088a:	4986      	ldr	r1, [pc, #536]	; (8000aa4 <HAL_RCC_OscConfig+0x330>)
 800088c:	6823      	ldr	r3, [r4, #0]
 800088e:	400b      	ands	r3, r1
 8000890:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000892:	2a00      	cmp	r2, #0
 8000894:	d1d8      	bne.n	8000848 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8000896:	f7ff fe15 	bl	80004c4 <HAL_GetTick>
 800089a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800089c:	2280      	movs	r2, #128	; 0x80
 800089e:	6823      	ldr	r3, [r4, #0]
 80008a0:	0292      	lsls	r2, r2, #10
 80008a2:	4213      	tst	r3, r2
 80008a4:	d100      	bne.n	80008a8 <HAL_RCC_OscConfig+0x134>
 80008a6:	e779      	b.n	800079c <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008a8:	f7ff fe0c 	bl	80004c4 <HAL_GetTick>
 80008ac:	1bc0      	subs	r0, r0, r7
 80008ae:	2864      	cmp	r0, #100	; 0x64
 80008b0:	d9f4      	bls.n	800089c <HAL_RCC_OscConfig+0x128>
 80008b2:	e7d6      	b.n	8000862 <HAL_RCC_OscConfig+0xee>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80008b4:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 80008b6:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80008b8:	4213      	tst	r3, r2
 80008ba:	d003      	beq.n	80008c4 <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80008bc:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 80008be:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80008c0:	4311      	orrs	r1, r2
 80008c2:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80008c4:	2e04      	cmp	r6, #4
 80008c6:	d004      	beq.n	80008d2 <HAL_RCC_OscConfig+0x15e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80008c8:	2e0c      	cmp	r6, #12
 80008ca:	d125      	bne.n	8000918 <HAL_RCC_OscConfig+0x1a4>
 80008cc:	9a01      	ldr	r2, [sp, #4]
 80008ce:	2a00      	cmp	r2, #0
 80008d0:	d122      	bne.n	8000918 <HAL_RCC_OscConfig+0x1a4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80008d2:	6822      	ldr	r2, [r4, #0]
 80008d4:	0752      	lsls	r2, r2, #29
 80008d6:	d502      	bpl.n	80008de <HAL_RCC_OscConfig+0x16a>
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d100      	bne.n	80008de <HAL_RCC_OscConfig+0x16a>
 80008dc:	e74f      	b.n	800077e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008de:	6861      	ldr	r1, [r4, #4]
 80008e0:	692a      	ldr	r2, [r5, #16]
 80008e2:	4871      	ldr	r0, [pc, #452]	; (8000aa8 <HAL_RCC_OscConfig+0x334>)
 80008e4:	0212      	lsls	r2, r2, #8
 80008e6:	4001      	ands	r1, r0
 80008e8:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80008ea:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008ec:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80008ee:	6822      	ldr	r2, [r4, #0]
 80008f0:	438a      	bics	r2, r1
 80008f2:	4313      	orrs	r3, r2
 80008f4:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80008f6:	f7ff ff01 	bl	80006fc <HAL_RCC_GetSysClockFreq>
 80008fa:	68e3      	ldr	r3, [r4, #12]
 80008fc:	4a66      	ldr	r2, [pc, #408]	; (8000a98 <HAL_RCC_OscConfig+0x324>)
 80008fe:	061b      	lsls	r3, r3, #24
 8000900:	0f1b      	lsrs	r3, r3, #28
 8000902:	5cd3      	ldrb	r3, [r2, r3]
 8000904:	40d8      	lsrs	r0, r3
 8000906:	4b65      	ldr	r3, [pc, #404]	; (8000a9c <HAL_RCC_OscConfig+0x328>)
 8000908:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff fda6 	bl	800045c <HAL_InitTick>
      if(status != HAL_OK)
 8000910:	2800      	cmp	r0, #0
 8000912:	d100      	bne.n	8000916 <HAL_RCC_OscConfig+0x1a2>
 8000914:	e746      	b.n	80007a4 <HAL_RCC_OscConfig+0x30>
 8000916:	e733      	b.n	8000780 <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 8000918:	2b00      	cmp	r3, #0
 800091a:	d019      	beq.n	8000950 <HAL_RCC_OscConfig+0x1dc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800091c:	2109      	movs	r1, #9
 800091e:	6822      	ldr	r2, [r4, #0]
 8000920:	438a      	bics	r2, r1
 8000922:	4313      	orrs	r3, r2
 8000924:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000926:	f7ff fdcd 	bl	80004c4 <HAL_GetTick>
 800092a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800092c:	2204      	movs	r2, #4
 800092e:	6823      	ldr	r3, [r4, #0]
 8000930:	4213      	tst	r3, r2
 8000932:	d007      	beq.n	8000944 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000934:	6862      	ldr	r2, [r4, #4]
 8000936:	692b      	ldr	r3, [r5, #16]
 8000938:	495b      	ldr	r1, [pc, #364]	; (8000aa8 <HAL_RCC_OscConfig+0x334>)
 800093a:	021b      	lsls	r3, r3, #8
 800093c:	400a      	ands	r2, r1
 800093e:	4313      	orrs	r3, r2
 8000940:	6063      	str	r3, [r4, #4]
 8000942:	e72f      	b.n	80007a4 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000944:	f7ff fdbe 	bl	80004c4 <HAL_GetTick>
 8000948:	1bc0      	subs	r0, r0, r7
 800094a:	2802      	cmp	r0, #2
 800094c:	d9ee      	bls.n	800092c <HAL_RCC_OscConfig+0x1b8>
 800094e:	e788      	b.n	8000862 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8000950:	2201      	movs	r2, #1
 8000952:	6823      	ldr	r3, [r4, #0]
 8000954:	4393      	bics	r3, r2
 8000956:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000958:	f7ff fdb4 	bl	80004c4 <HAL_GetTick>
 800095c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800095e:	2204      	movs	r2, #4
 8000960:	6823      	ldr	r3, [r4, #0]
 8000962:	4213      	tst	r3, r2
 8000964:	d100      	bne.n	8000968 <HAL_RCC_OscConfig+0x1f4>
 8000966:	e71d      	b.n	80007a4 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000968:	f7ff fdac 	bl	80004c4 <HAL_GetTick>
 800096c:	1bc0      	subs	r0, r0, r7
 800096e:	2802      	cmp	r0, #2
 8000970:	d9f5      	bls.n	800095e <HAL_RCC_OscConfig+0x1ea>
 8000972:	e776      	b.n	8000862 <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000974:	69eb      	ldr	r3, [r5, #28]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d020      	beq.n	80009bc <HAL_RCC_OscConfig+0x248>
        __HAL_RCC_MSI_ENABLE();
 800097a:	2380      	movs	r3, #128	; 0x80
 800097c:	6822      	ldr	r2, [r4, #0]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	4313      	orrs	r3, r2
 8000982:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000984:	f7ff fd9e 	bl	80004c4 <HAL_GetTick>
 8000988:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	6823      	ldr	r3, [r4, #0]
 800098e:	0092      	lsls	r2, r2, #2
 8000990:	4213      	tst	r3, r2
 8000992:	d00d      	beq.n	80009b0 <HAL_RCC_OscConfig+0x23c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000994:	6863      	ldr	r3, [r4, #4]
 8000996:	4a3f      	ldr	r2, [pc, #252]	; (8000a94 <HAL_RCC_OscConfig+0x320>)
 8000998:	4013      	ands	r3, r2
 800099a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800099c:	4313      	orrs	r3, r2
 800099e:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80009a0:	6862      	ldr	r2, [r4, #4]
 80009a2:	6a2b      	ldr	r3, [r5, #32]
 80009a4:	0212      	lsls	r2, r2, #8
 80009a6:	061b      	lsls	r3, r3, #24
 80009a8:	0a12      	lsrs	r2, r2, #8
 80009aa:	4313      	orrs	r3, r2
 80009ac:	6063      	str	r3, [r4, #4]
 80009ae:	e725      	b.n	80007fc <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80009b0:	f7ff fd88 	bl	80004c4 <HAL_GetTick>
 80009b4:	1bc0      	subs	r0, r0, r7
 80009b6:	2802      	cmp	r0, #2
 80009b8:	d9e7      	bls.n	800098a <HAL_RCC_OscConfig+0x216>
 80009ba:	e752      	b.n	8000862 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 80009bc:	6823      	ldr	r3, [r4, #0]
 80009be:	4a3b      	ldr	r2, [pc, #236]	; (8000aac <HAL_RCC_OscConfig+0x338>)
 80009c0:	4013      	ands	r3, r2
 80009c2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009c4:	f7ff fd7e 	bl	80004c4 <HAL_GetTick>
 80009c8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80009ca:	2280      	movs	r2, #128	; 0x80
 80009cc:	6823      	ldr	r3, [r4, #0]
 80009ce:	0092      	lsls	r2, r2, #2
 80009d0:	4213      	tst	r3, r2
 80009d2:	d100      	bne.n	80009d6 <HAL_RCC_OscConfig+0x262>
 80009d4:	e712      	b.n	80007fc <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80009d6:	f7ff fd75 	bl	80004c4 <HAL_GetTick>
 80009da:	1bc0      	subs	r0, r0, r7
 80009dc:	2802      	cmp	r0, #2
 80009de:	d9f4      	bls.n	80009ca <HAL_RCC_OscConfig+0x256>
 80009e0:	e73f      	b.n	8000862 <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009e2:	696a      	ldr	r2, [r5, #20]
 80009e4:	2301      	movs	r3, #1
 80009e6:	2a00      	cmp	r2, #0
 80009e8:	d010      	beq.n	8000a0c <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 80009ea:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80009ec:	4313      	orrs	r3, r2
 80009ee:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80009f0:	f7ff fd68 	bl	80004c4 <HAL_GetTick>
 80009f4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80009f6:	2202      	movs	r2, #2
 80009f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80009fa:	4213      	tst	r3, r2
 80009fc:	d000      	beq.n	8000a00 <HAL_RCC_OscConfig+0x28c>
 80009fe:	e701      	b.n	8000804 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a00:	f7ff fd60 	bl	80004c4 <HAL_GetTick>
 8000a04:	1bc0      	subs	r0, r0, r7
 8000a06:	2802      	cmp	r0, #2
 8000a08:	d9f5      	bls.n	80009f6 <HAL_RCC_OscConfig+0x282>
 8000a0a:	e72a      	b.n	8000862 <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 8000a0c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000a0e:	439a      	bics	r2, r3
 8000a10:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000a12:	f7ff fd57 	bl	80004c4 <HAL_GetTick>
 8000a16:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000a18:	2202      	movs	r2, #2
 8000a1a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000a1c:	4213      	tst	r3, r2
 8000a1e:	d100      	bne.n	8000a22 <HAL_RCC_OscConfig+0x2ae>
 8000a20:	e6f0      	b.n	8000804 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a22:	f7ff fd4f 	bl	80004c4 <HAL_GetTick>
 8000a26:	1bc0      	subs	r0, r0, r7
 8000a28:	2802      	cmp	r0, #2
 8000a2a:	d9f5      	bls.n	8000a18 <HAL_RCC_OscConfig+0x2a4>
 8000a2c:	e719      	b.n	8000862 <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a2e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000a30:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a32:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000a34:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8000a36:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a38:	421a      	tst	r2, r3
 8000a3a:	d104      	bne.n	8000a46 <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a3c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8000a42:	2301      	movs	r3, #1
 8000a44:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	4f19      	ldr	r7, [pc, #100]	; (8000ab0 <HAL_RCC_OscConfig+0x33c>)
 8000a4a:	0052      	lsls	r2, r2, #1
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	4213      	tst	r3, r2
 8000a50:	d008      	beq.n	8000a64 <HAL_RCC_OscConfig+0x2f0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a52:	2280      	movs	r2, #128	; 0x80
 8000a54:	68ab      	ldr	r3, [r5, #8]
 8000a56:	0052      	lsls	r2, r2, #1
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d12b      	bne.n	8000ab4 <HAL_RCC_OscConfig+0x340>
 8000a5c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	6523      	str	r3, [r4, #80]	; 0x50
 8000a62:	e04c      	b.n	8000afe <HAL_RCC_OscConfig+0x38a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a64:	2280      	movs	r2, #128	; 0x80
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	0052      	lsls	r2, r2, #1
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000a6e:	f7ff fd29 	bl	80004c4 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a72:	2380      	movs	r3, #128	; 0x80
 8000a74:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8000a76:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a78:	9303      	str	r3, [sp, #12]
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	9a03      	ldr	r2, [sp, #12]
 8000a7e:	4213      	tst	r3, r2
 8000a80:	d1e7      	bne.n	8000a52 <HAL_RCC_OscConfig+0x2de>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a82:	f7ff fd1f 	bl	80004c4 <HAL_GetTick>
 8000a86:	9b02      	ldr	r3, [sp, #8]
 8000a88:	1ac0      	subs	r0, r0, r3
 8000a8a:	2864      	cmp	r0, #100	; 0x64
 8000a8c:	d9f5      	bls.n	8000a7a <HAL_RCC_OscConfig+0x306>
 8000a8e:	e6e8      	b.n	8000862 <HAL_RCC_OscConfig+0xee>
 8000a90:	40021000 	.word	0x40021000
 8000a94:	ffff1fff 	.word	0xffff1fff
 8000a98:	080026dd 	.word	0x080026dd
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	fffeffff 	.word	0xfffeffff
 8000aa4:	fffbffff 	.word	0xfffbffff
 8000aa8:	ffffe0ff 	.word	0xffffe0ff
 8000aac:	fffffeff 	.word	0xfffffeff
 8000ab0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d116      	bne.n	8000ae6 <HAL_RCC_OscConfig+0x372>
 8000ab8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000aba:	4a6a      	ldr	r2, [pc, #424]	; (8000c64 <HAL_RCC_OscConfig+0x4f0>)
 8000abc:	4013      	ands	r3, r2
 8000abe:	6523      	str	r3, [r4, #80]	; 0x50
 8000ac0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ac2:	4a69      	ldr	r2, [pc, #420]	; (8000c68 <HAL_RCC_OscConfig+0x4f4>)
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000ac8:	f7ff fcfc 	bl	80004c4 <HAL_GetTick>
 8000acc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000ace:	2280      	movs	r2, #128	; 0x80
 8000ad0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ad2:	0092      	lsls	r2, r2, #2
 8000ad4:	4213      	tst	r3, r2
 8000ad6:	d02a      	beq.n	8000b2e <HAL_RCC_OscConfig+0x3ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ad8:	f7ff fcf4 	bl	80004c4 <HAL_GetTick>
 8000adc:	4b63      	ldr	r3, [pc, #396]	; (8000c6c <HAL_RCC_OscConfig+0x4f8>)
 8000ade:	1bc0      	subs	r0, r0, r7
 8000ae0:	4298      	cmp	r0, r3
 8000ae2:	d9f4      	bls.n	8000ace <HAL_RCC_OscConfig+0x35a>
 8000ae4:	e6bd      	b.n	8000862 <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ae6:	21a0      	movs	r1, #160	; 0xa0
 8000ae8:	00c9      	lsls	r1, r1, #3
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d10b      	bne.n	8000b06 <HAL_RCC_OscConfig+0x392>
 8000aee:	2380      	movs	r3, #128	; 0x80
 8000af0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000af2:	00db      	lsls	r3, r3, #3
 8000af4:	430b      	orrs	r3, r1
 8000af6:	6523      	str	r3, [r4, #80]	; 0x50
 8000af8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000afa:	431a      	orrs	r2, r3
 8000afc:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000afe:	f7ff fce1 	bl	80004c4 <HAL_GetTick>
 8000b02:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000b04:	e00e      	b.n	8000b24 <HAL_RCC_OscConfig+0x3b0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b06:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b08:	4a56      	ldr	r2, [pc, #344]	; (8000c64 <HAL_RCC_OscConfig+0x4f0>)
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	6523      	str	r3, [r4, #80]	; 0x50
 8000b0e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b10:	4a55      	ldr	r2, [pc, #340]	; (8000c68 <HAL_RCC_OscConfig+0x4f4>)
 8000b12:	4013      	ands	r3, r2
 8000b14:	e7a4      	b.n	8000a60 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b16:	f7ff fcd5 	bl	80004c4 <HAL_GetTick>
 8000b1a:	4b54      	ldr	r3, [pc, #336]	; (8000c6c <HAL_RCC_OscConfig+0x4f8>)
 8000b1c:	1bc0      	subs	r0, r0, r7
 8000b1e:	4298      	cmp	r0, r3
 8000b20:	d900      	bls.n	8000b24 <HAL_RCC_OscConfig+0x3b0>
 8000b22:	e69e      	b.n	8000862 <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000b24:	2280      	movs	r2, #128	; 0x80
 8000b26:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b28:	0092      	lsls	r2, r2, #2
 8000b2a:	4213      	tst	r3, r2
 8000b2c:	d0f3      	beq.n	8000b16 <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8000b2e:	9b01      	ldr	r3, [sp, #4]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d000      	beq.n	8000b36 <HAL_RCC_OscConfig+0x3c2>
 8000b34:	e66a      	b.n	800080c <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000b38:	4a4d      	ldr	r2, [pc, #308]	; (8000c70 <HAL_RCC_OscConfig+0x4fc>)
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	63a3      	str	r3, [r4, #56]	; 0x38
 8000b3e:	e665      	b.n	800080c <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000b40:	69a9      	ldr	r1, [r5, #24]
 8000b42:	2301      	movs	r3, #1
 8000b44:	4a4b      	ldr	r2, [pc, #300]	; (8000c74 <HAL_RCC_OscConfig+0x500>)
 8000b46:	2900      	cmp	r1, #0
 8000b48:	d018      	beq.n	8000b7c <HAL_RCC_OscConfig+0x408>
        __HAL_RCC_HSI48_ENABLE();
 8000b4a:	68a1      	ldr	r1, [r4, #8]
 8000b4c:	4319      	orrs	r1, r3
 8000b4e:	60a1      	str	r1, [r4, #8]
 8000b50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b52:	430b      	orrs	r3, r1
 8000b54:	6363      	str	r3, [r4, #52]	; 0x34
 8000b56:	2380      	movs	r3, #128	; 0x80
 8000b58:	6a11      	ldr	r1, [r2, #32]
 8000b5a:	019b      	lsls	r3, r3, #6
 8000b5c:	430b      	orrs	r3, r1
 8000b5e:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000b60:	f7ff fcb0 	bl	80004c4 <HAL_GetTick>
 8000b64:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000b66:	2202      	movs	r2, #2
 8000b68:	68a3      	ldr	r3, [r4, #8]
 8000b6a:	4213      	tst	r3, r2
 8000b6c:	d000      	beq.n	8000b70 <HAL_RCC_OscConfig+0x3fc>
 8000b6e:	e651      	b.n	8000814 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000b70:	f7ff fca8 	bl	80004c4 <HAL_GetTick>
 8000b74:	1bc0      	subs	r0, r0, r7
 8000b76:	2802      	cmp	r0, #2
 8000b78:	d9f5      	bls.n	8000b66 <HAL_RCC_OscConfig+0x3f2>
 8000b7a:	e672      	b.n	8000862 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 8000b7c:	68a1      	ldr	r1, [r4, #8]
 8000b7e:	4399      	bics	r1, r3
 8000b80:	60a1      	str	r1, [r4, #8]
 8000b82:	6a13      	ldr	r3, [r2, #32]
 8000b84:	493c      	ldr	r1, [pc, #240]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000b86:	400b      	ands	r3, r1
 8000b88:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000b8a:	f7ff fc9b 	bl	80004c4 <HAL_GetTick>
 8000b8e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000b90:	2202      	movs	r2, #2
 8000b92:	68a3      	ldr	r3, [r4, #8]
 8000b94:	4213      	tst	r3, r2
 8000b96:	d100      	bne.n	8000b9a <HAL_RCC_OscConfig+0x426>
 8000b98:	e63c      	b.n	8000814 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000b9a:	f7ff fc93 	bl	80004c4 <HAL_GetTick>
 8000b9e:	1bc0      	subs	r0, r0, r7
 8000ba0:	2802      	cmp	r0, #2
 8000ba2:	d9f5      	bls.n	8000b90 <HAL_RCC_OscConfig+0x41c>
 8000ba4:	e65d      	b.n	8000862 <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ba6:	2e0c      	cmp	r6, #12
 8000ba8:	d043      	beq.n	8000c32 <HAL_RCC_OscConfig+0x4be>
 8000baa:	4a34      	ldr	r2, [pc, #208]	; (8000c7c <HAL_RCC_OscConfig+0x508>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d12e      	bne.n	8000c0e <HAL_RCC_OscConfig+0x49a>
        __HAL_RCC_PLL_DISABLE();
 8000bb0:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000bb2:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000bb8:	f7ff fc84 	bl	80004c4 <HAL_GetTick>
 8000bbc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000bbe:	04b6      	lsls	r6, r6, #18
 8000bc0:	6823      	ldr	r3, [r4, #0]
 8000bc2:	4233      	tst	r3, r6
 8000bc4:	d11d      	bne.n	8000c02 <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bc6:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8000bc8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000bca:	68e2      	ldr	r2, [r4, #12]
 8000bcc:	430b      	orrs	r3, r1
 8000bce:	492c      	ldr	r1, [pc, #176]	; (8000c80 <HAL_RCC_OscConfig+0x50c>)
 8000bd0:	400a      	ands	r2, r1
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000bd6:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000bdc:	2380      	movs	r3, #128	; 0x80
 8000bde:	6822      	ldr	r2, [r4, #0]
 8000be0:	045b      	lsls	r3, r3, #17
 8000be2:	4313      	orrs	r3, r2
 8000be4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000be6:	f7ff fc6d 	bl	80004c4 <HAL_GetTick>
 8000bea:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000bec:	04ad      	lsls	r5, r5, #18
 8000bee:	6823      	ldr	r3, [r4, #0]
 8000bf0:	422b      	tst	r3, r5
 8000bf2:	d000      	beq.n	8000bf6 <HAL_RCC_OscConfig+0x482>
 8000bf4:	e612      	b.n	800081c <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bf6:	f7ff fc65 	bl	80004c4 <HAL_GetTick>
 8000bfa:	1b80      	subs	r0, r0, r6
 8000bfc:	2802      	cmp	r0, #2
 8000bfe:	d9f6      	bls.n	8000bee <HAL_RCC_OscConfig+0x47a>
 8000c00:	e62f      	b.n	8000862 <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c02:	f7ff fc5f 	bl	80004c4 <HAL_GetTick>
 8000c06:	1bc0      	subs	r0, r0, r7
 8000c08:	2802      	cmp	r0, #2
 8000c0a:	d9d9      	bls.n	8000bc0 <HAL_RCC_OscConfig+0x44c>
 8000c0c:	e629      	b.n	8000862 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 8000c0e:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000c10:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000c12:	4013      	ands	r3, r2
 8000c14:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c16:	f7ff fc55 	bl	80004c4 <HAL_GetTick>
 8000c1a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000c1c:	04ad      	lsls	r5, r5, #18
 8000c1e:	6823      	ldr	r3, [r4, #0]
 8000c20:	422b      	tst	r3, r5
 8000c22:	d100      	bne.n	8000c26 <HAL_RCC_OscConfig+0x4b2>
 8000c24:	e5fa      	b.n	800081c <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c26:	f7ff fc4d 	bl	80004c4 <HAL_GetTick>
 8000c2a:	1b80      	subs	r0, r0, r6
 8000c2c:	2802      	cmp	r0, #2
 8000c2e:	d9f6      	bls.n	8000c1e <HAL_RCC_OscConfig+0x4aa>
 8000c30:	e617      	b.n	8000862 <HAL_RCC_OscConfig+0xee>
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c32:	2280      	movs	r2, #128	; 0x80
      pll_config = RCC->CFGR;
 8000c34:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c36:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8000c38:	0252      	lsls	r2, r2, #9
 8000c3a:	401a      	ands	r2, r3
        return HAL_ERROR;
 8000c3c:	2001      	movs	r0, #1
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c3e:	428a      	cmp	r2, r1
 8000c40:	d000      	beq.n	8000c44 <HAL_RCC_OscConfig+0x4d0>
 8000c42:	e59d      	b.n	8000780 <HAL_RCC_OscConfig+0xc>
         (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000c44:	22f0      	movs	r2, #240	; 0xf0
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c46:	6b29      	ldr	r1, [r5, #48]	; 0x30
         (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000c48:	0392      	lsls	r2, r2, #14
 8000c4a:	401a      	ands	r2, r3
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c4c:	428a      	cmp	r2, r1
 8000c4e:	d000      	beq.n	8000c52 <HAL_RCC_OscConfig+0x4de>
 8000c50:	e596      	b.n	8000780 <HAL_RCC_OscConfig+0xc>
         (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000c52:	20c0      	movs	r0, #192	; 0xc0
 8000c54:	0400      	lsls	r0, r0, #16
 8000c56:	4003      	ands	r3, r0
         (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000c58:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000c5a:	1a18      	subs	r0, r3, r0
 8000c5c:	1e43      	subs	r3, r0, #1
 8000c5e:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8000c60:	b2c0      	uxtb	r0, r0
 8000c62:	e58d      	b.n	8000780 <HAL_RCC_OscConfig+0xc>
 8000c64:	fffffeff 	.word	0xfffffeff
 8000c68:	fffffbff 	.word	0xfffffbff
 8000c6c:	00001388 	.word	0x00001388
 8000c70:	efffffff 	.word	0xefffffff
 8000c74:	40010000 	.word	0x40010000
 8000c78:	ffffdfff 	.word	0xffffdfff
 8000c7c:	feffffff 	.word	0xfeffffff
 8000c80:	ff02ffff 	.word	0xff02ffff

08000c84 <HAL_RCC_ClockConfig>:
{
 8000c84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000c86:	1e06      	subs	r6, r0, #0
 8000c88:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8000c8a:	d101      	bne.n	8000c90 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8000c8c:	2001      	movs	r0, #1
}
 8000c8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c90:	2201      	movs	r2, #1
 8000c92:	4c51      	ldr	r4, [pc, #324]	; (8000dd8 <HAL_RCC_ClockConfig+0x154>)
 8000c94:	9901      	ldr	r1, [sp, #4]
 8000c96:	6823      	ldr	r3, [r4, #0]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d327      	bcc.n	8000cee <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c9e:	6832      	ldr	r2, [r6, #0]
 8000ca0:	0793      	lsls	r3, r2, #30
 8000ca2:	d42f      	bmi.n	8000d04 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ca4:	07d3      	lsls	r3, r2, #31
 8000ca6:	d435      	bmi.n	8000d14 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ca8:	2301      	movs	r3, #1
 8000caa:	6822      	ldr	r2, [r4, #0]
 8000cac:	9901      	ldr	r1, [sp, #4]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	4291      	cmp	r1, r2
 8000cb2:	d200      	bcs.n	8000cb6 <HAL_RCC_ClockConfig+0x32>
 8000cb4:	e081      	b.n	8000dba <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cb6:	6832      	ldr	r2, [r6, #0]
 8000cb8:	4c48      	ldr	r4, [pc, #288]	; (8000ddc <HAL_RCC_ClockConfig+0x158>)
 8000cba:	0753      	lsls	r3, r2, #29
 8000cbc:	d500      	bpl.n	8000cc0 <HAL_RCC_ClockConfig+0x3c>
 8000cbe:	e084      	b.n	8000dca <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cc0:	0713      	lsls	r3, r2, #28
 8000cc2:	d506      	bpl.n	8000cd2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000cc4:	68e2      	ldr	r2, [r4, #12]
 8000cc6:	6933      	ldr	r3, [r6, #16]
 8000cc8:	4945      	ldr	r1, [pc, #276]	; (8000de0 <HAL_RCC_ClockConfig+0x15c>)
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	400a      	ands	r2, r1
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cd2:	f7ff fd13 	bl	80006fc <HAL_RCC_GetSysClockFreq>
 8000cd6:	68e3      	ldr	r3, [r4, #12]
 8000cd8:	4a42      	ldr	r2, [pc, #264]	; (8000de4 <HAL_RCC_ClockConfig+0x160>)
 8000cda:	061b      	lsls	r3, r3, #24
 8000cdc:	0f1b      	lsrs	r3, r3, #28
 8000cde:	5cd3      	ldrb	r3, [r2, r3]
 8000ce0:	40d8      	lsrs	r0, r3
 8000ce2:	4b41      	ldr	r3, [pc, #260]	; (8000de8 <HAL_RCC_ClockConfig+0x164>)
 8000ce4:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f7ff fbb8 	bl	800045c <HAL_InitTick>
 8000cec:	e7cf      	b.n	8000c8e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cee:	6823      	ldr	r3, [r4, #0]
 8000cf0:	9901      	ldr	r1, [sp, #4]
 8000cf2:	4393      	bics	r3, r2
 8000cf4:	430b      	orrs	r3, r1
 8000cf6:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cf8:	6823      	ldr	r3, [r4, #0]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	9a01      	ldr	r2, [sp, #4]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d1c4      	bne.n	8000c8c <HAL_RCC_ClockConfig+0x8>
 8000d02:	e7cc      	b.n	8000c9e <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d04:	20f0      	movs	r0, #240	; 0xf0
 8000d06:	4935      	ldr	r1, [pc, #212]	; (8000ddc <HAL_RCC_ClockConfig+0x158>)
 8000d08:	68cb      	ldr	r3, [r1, #12]
 8000d0a:	4383      	bics	r3, r0
 8000d0c:	68b0      	ldr	r0, [r6, #8]
 8000d0e:	4303      	orrs	r3, r0
 8000d10:	60cb      	str	r3, [r1, #12]
 8000d12:	e7c7      	b.n	8000ca4 <HAL_RCC_ClockConfig+0x20>
 8000d14:	4d31      	ldr	r5, [pc, #196]	; (8000ddc <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d16:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d18:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d1a:	2a02      	cmp	r2, #2
 8000d1c:	d119      	bne.n	8000d52 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d1e:	039b      	lsls	r3, r3, #14
 8000d20:	d5b4      	bpl.n	8000c8c <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d22:	2103      	movs	r1, #3
 8000d24:	68eb      	ldr	r3, [r5, #12]
 8000d26:	438b      	bics	r3, r1
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8000d2c:	f7ff fbca 	bl	80004c4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d30:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000d32:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d119      	bne.n	8000d6c <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d38:	220c      	movs	r2, #12
 8000d3a:	68eb      	ldr	r3, [r5, #12]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	2b08      	cmp	r3, #8
 8000d40:	d0b2      	beq.n	8000ca8 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d42:	f7ff fbbf 	bl	80004c4 <HAL_GetTick>
 8000d46:	4b29      	ldr	r3, [pc, #164]	; (8000dec <HAL_RCC_ClockConfig+0x168>)
 8000d48:	1bc0      	subs	r0, r0, r7
 8000d4a:	4298      	cmp	r0, r3
 8000d4c:	d9f4      	bls.n	8000d38 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8000d4e:	2003      	movs	r0, #3
 8000d50:	e79d      	b.n	8000c8e <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d52:	2a03      	cmp	r2, #3
 8000d54:	d102      	bne.n	8000d5c <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000d56:	019b      	lsls	r3, r3, #6
 8000d58:	d4e3      	bmi.n	8000d22 <HAL_RCC_ClockConfig+0x9e>
 8000d5a:	e797      	b.n	8000c8c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000d5c:	2a01      	cmp	r2, #1
 8000d5e:	d102      	bne.n	8000d66 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000d60:	075b      	lsls	r3, r3, #29
 8000d62:	d4de      	bmi.n	8000d22 <HAL_RCC_ClockConfig+0x9e>
 8000d64:	e792      	b.n	8000c8c <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000d66:	059b      	lsls	r3, r3, #22
 8000d68:	d4db      	bmi.n	8000d22 <HAL_RCC_ClockConfig+0x9e>
 8000d6a:	e78f      	b.n	8000c8c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	d10b      	bne.n	8000d88 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d70:	220c      	movs	r2, #12
 8000d72:	68eb      	ldr	r3, [r5, #12]
 8000d74:	4013      	ands	r3, r2
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d096      	beq.n	8000ca8 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d7a:	f7ff fba3 	bl	80004c4 <HAL_GetTick>
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <HAL_RCC_ClockConfig+0x168>)
 8000d80:	1bc0      	subs	r0, r0, r7
 8000d82:	4298      	cmp	r0, r3
 8000d84:	d9f4      	bls.n	8000d70 <HAL_RCC_ClockConfig+0xec>
 8000d86:	e7e2      	b.n	8000d4e <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d010      	beq.n	8000dae <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000d8c:	220c      	movs	r2, #12
 8000d8e:	68eb      	ldr	r3, [r5, #12]
 8000d90:	4213      	tst	r3, r2
 8000d92:	d089      	beq.n	8000ca8 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d94:	f7ff fb96 	bl	80004c4 <HAL_GetTick>
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <HAL_RCC_ClockConfig+0x168>)
 8000d9a:	1bc0      	subs	r0, r0, r7
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	d9f5      	bls.n	8000d8c <HAL_RCC_ClockConfig+0x108>
 8000da0:	e7d5      	b.n	8000d4e <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000da2:	f7ff fb8f 	bl	80004c4 <HAL_GetTick>
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <HAL_RCC_ClockConfig+0x168>)
 8000da8:	1bc0      	subs	r0, r0, r7
 8000daa:	4298      	cmp	r0, r3
 8000dac:	d8cf      	bhi.n	8000d4e <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dae:	220c      	movs	r2, #12
 8000db0:	68eb      	ldr	r3, [r5, #12]
 8000db2:	4013      	ands	r3, r2
 8000db4:	2b04      	cmp	r3, #4
 8000db6:	d1f4      	bne.n	8000da2 <HAL_RCC_ClockConfig+0x11e>
 8000db8:	e776      	b.n	8000ca8 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dba:	6822      	ldr	r2, [r4, #0]
 8000dbc:	439a      	bics	r2, r3
 8000dbe:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dc0:	6822      	ldr	r2, [r4, #0]
 8000dc2:	421a      	tst	r2, r3
 8000dc4:	d000      	beq.n	8000dc8 <HAL_RCC_ClockConfig+0x144>
 8000dc6:	e761      	b.n	8000c8c <HAL_RCC_ClockConfig+0x8>
 8000dc8:	e775      	b.n	8000cb6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dca:	68e3      	ldr	r3, [r4, #12]
 8000dcc:	4908      	ldr	r1, [pc, #32]	; (8000df0 <HAL_RCC_ClockConfig+0x16c>)
 8000dce:	400b      	ands	r3, r1
 8000dd0:	68f1      	ldr	r1, [r6, #12]
 8000dd2:	430b      	orrs	r3, r1
 8000dd4:	60e3      	str	r3, [r4, #12]
 8000dd6:	e773      	b.n	8000cc0 <HAL_RCC_ClockConfig+0x3c>
 8000dd8:	40022000 	.word	0x40022000
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	ffffc7ff 	.word	0xffffc7ff
 8000de4:	080026dd 	.word	0x080026dd
 8000de8:	20000000 	.word	0x20000000
 8000dec:	00001388 	.word	0x00001388
 8000df0:	fffff8ff 	.word	0xfffff8ff

08000df4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	055b      	lsls	r3, r3, #21
 8000dfc:	0f5b      	lsrs	r3, r3, #29
 8000dfe:	5cd3      	ldrb	r3, [r2, r3]
 8000e00:	4a03      	ldr	r2, [pc, #12]	; (8000e10 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000e02:	6810      	ldr	r0, [r2, #0]
 8000e04:	40d8      	lsrs	r0, r3
}
 8000e06:	4770      	bx	lr
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	080026ed 	.word	0x080026ed
 8000e10:	20000000 	.word	0x20000000

08000e14 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	049b      	lsls	r3, r3, #18
 8000e1c:	0f5b      	lsrs	r3, r3, #29
 8000e1e:	5cd3      	ldrb	r3, [r2, r3]
 8000e20:	4a03      	ldr	r2, [pc, #12]	; (8000e30 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000e22:	6810      	ldr	r0, [r2, #0]
 8000e24:	40d8      	lsrs	r0, r3
}
 8000e26:	4770      	bx	lr
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	080026ed 	.word	0x080026ed
 8000e30:	20000000 	.word	0x20000000

08000e34 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8000e34:	2382      	movs	r3, #130	; 0x82
{
 8000e36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8000e38:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8000e3a:	011b      	lsls	r3, r3, #4
{
 8000e3c:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8000e3e:	421a      	tst	r2, r3
 8000e40:	d048      	beq.n	8000ed4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e42:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000e44:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e46:	4c65      	ldr	r4, [pc, #404]	; (8000fdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000e48:	055b      	lsls	r3, r3, #21
 8000e4a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8000e4c:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e4e:	421a      	tst	r2, r3
 8000e50:	d104      	bne.n	8000e5c <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000e54:	4313      	orrs	r3, r2
 8000e56:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e5c:	2780      	movs	r7, #128	; 0x80
 8000e5e:	4e60      	ldr	r6, [pc, #384]	; (8000fe0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8000e60:	007f      	lsls	r7, r7, #1
 8000e62:	6833      	ldr	r3, [r6, #0]
 8000e64:	423b      	tst	r3, r7
 8000e66:	d077      	beq.n	8000f58 <HAL_RCCEx_PeriphCLKConfig+0x124>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000e68:	6869      	ldr	r1, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8000e6a:	22c0      	movs	r2, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000e6c:	0008      	movs	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8000e6e:	6823      	ldr	r3, [r4, #0]
 8000e70:	0392      	lsls	r2, r2, #14
 8000e72:	4013      	ands	r3, r2
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000e74:	4010      	ands	r0, r2
 8000e76:	4283      	cmp	r3, r0
 8000e78:	d103      	bne.n	8000e82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8000e7a:	68a8      	ldr	r0, [r5, #8]
 8000e7c:	4002      	ands	r2, r0
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d009      	beq.n	8000e96 <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8000e82:	23c0      	movs	r3, #192	; 0xc0
 8000e84:	000a      	movs	r2, r1
 8000e86:	029b      	lsls	r3, r3, #10
 8000e88:	401a      	ands	r2, r3
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d103      	bne.n	8000e96 <HAL_RCCEx_PeriphCLKConfig+0x62>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8000e8e:	6823      	ldr	r3, [r4, #0]
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8000e90:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8000e92:	039b      	lsls	r3, r3, #14
 8000e94:	d471      	bmi.n	8000f7a <HAL_RCCEx_PeriphCLKConfig+0x146>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8000e96:	22c0      	movs	r2, #192	; 0xc0
 8000e98:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000e9a:	0292      	lsls	r2, r2, #10
 8000e9c:	4013      	ands	r3, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8000e9e:	d000      	beq.n	8000ea2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8000ea0:	e06c      	b.n	8000f7c <HAL_RCCEx_PeriphCLKConfig+0x148>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000ea2:	6869      	ldr	r1, [r5, #4]
 8000ea4:	23c0      	movs	r3, #192	; 0xc0
 8000ea6:	000a      	movs	r2, r1
 8000ea8:	029b      	lsls	r3, r3, #10
 8000eaa:	401a      	ands	r2, r3
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d107      	bne.n	8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8000eb0:	6823      	ldr	r3, [r4, #0]
 8000eb2:	484c      	ldr	r0, [pc, #304]	; (8000fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8000eb4:	4003      	ands	r3, r0
 8000eb6:	20c0      	movs	r0, #192	; 0xc0
 8000eb8:	0380      	lsls	r0, r0, #14
 8000eba:	4001      	ands	r1, r0
 8000ebc:	430b      	orrs	r3, r1
 8000ebe:	6023      	str	r3, [r4, #0]
 8000ec0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ec2:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000ec4:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000ec6:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d103      	bne.n	8000ed4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ecc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ece:	4a46      	ldr	r2, [pc, #280]	; (8000fe8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000ed4:	682b      	ldr	r3, [r5, #0]
 8000ed6:	07da      	lsls	r2, r3, #31
 8000ed8:	d506      	bpl.n	8000ee8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000eda:	2003      	movs	r0, #3
 8000edc:	493f      	ldr	r1, [pc, #252]	; (8000fdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000ede:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000ee0:	4382      	bics	r2, r0
 8000ee2:	68e8      	ldr	r0, [r5, #12]
 8000ee4:	4302      	orrs	r2, r0
 8000ee6:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000ee8:	079a      	lsls	r2, r3, #30
 8000eea:	d506      	bpl.n	8000efa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000eec:	200c      	movs	r0, #12
 8000eee:	493b      	ldr	r1, [pc, #236]	; (8000fdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000ef0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000ef2:	4382      	bics	r2, r0
 8000ef4:	6928      	ldr	r0, [r5, #16]
 8000ef6:	4302      	orrs	r2, r0
 8000ef8:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8000efa:	075a      	lsls	r2, r3, #29
 8000efc:	d506      	bpl.n	8000f0c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8000efe:	4937      	ldr	r1, [pc, #220]	; (8000fdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f00:	483a      	ldr	r0, [pc, #232]	; (8000fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8000f02:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f04:	4002      	ands	r2, r0
 8000f06:	6968      	ldr	r0, [r5, #20]
 8000f08:	4302      	orrs	r2, r0
 8000f0a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000f0c:	071a      	lsls	r2, r3, #28
 8000f0e:	d506      	bpl.n	8000f1e <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000f10:	4932      	ldr	r1, [pc, #200]	; (8000fdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f12:	4837      	ldr	r0, [pc, #220]	; (8000ff0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8000f14:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f16:	4002      	ands	r2, r0
 8000f18:	69a8      	ldr	r0, [r5, #24]
 8000f1a:	4302      	orrs	r2, r0
 8000f1c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000f1e:	05da      	lsls	r2, r3, #23
 8000f20:	d506      	bpl.n	8000f30 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000f22:	492e      	ldr	r1, [pc, #184]	; (8000fdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f24:	4833      	ldr	r0, [pc, #204]	; (8000ff4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8000f26:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f28:	4002      	ands	r2, r0
 8000f2a:	69e8      	ldr	r0, [r5, #28]
 8000f2c:	4302      	orrs	r2, r0
 8000f2e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8000f30:	065a      	lsls	r2, r3, #25
 8000f32:	d506      	bpl.n	8000f42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000f34:	4929      	ldr	r1, [pc, #164]	; (8000fdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f36:	4830      	ldr	r0, [pc, #192]	; (8000ff8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8000f38:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f3a:	4002      	ands	r2, r0
 8000f3c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8000f3e:	4302      	orrs	r2, r0
 8000f40:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8000f42:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8000f44:	061b      	lsls	r3, r3, #24
 8000f46:	d518      	bpl.n	8000f7a <HAL_RCCEx_PeriphCLKConfig+0x146>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8000f48:	4a24      	ldr	r2, [pc, #144]	; (8000fdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f4a:	492c      	ldr	r1, [pc, #176]	; (8000ffc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8000f4c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8000f4e:	400b      	ands	r3, r1
 8000f50:	6a29      	ldr	r1, [r5, #32]
 8000f52:	430b      	orrs	r3, r1
 8000f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f56:	e010      	b.n	8000f7a <HAL_RCCEx_PeriphCLKConfig+0x146>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f58:	6833      	ldr	r3, [r6, #0]
 8000f5a:	433b      	orrs	r3, r7
 8000f5c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000f5e:	f7ff fab1 	bl	80004c4 <HAL_GetTick>
 8000f62:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f64:	6833      	ldr	r3, [r6, #0]
 8000f66:	423b      	tst	r3, r7
 8000f68:	d000      	beq.n	8000f6c <HAL_RCCEx_PeriphCLKConfig+0x138>
 8000f6a:	e77d      	b.n	8000e68 <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f6c:	f7ff faaa 	bl	80004c4 <HAL_GetTick>
 8000f70:	9b01      	ldr	r3, [sp, #4]
 8000f72:	1ac0      	subs	r0, r0, r3
 8000f74:	2864      	cmp	r0, #100	; 0x64
 8000f76:	d9f5      	bls.n	8000f64 <HAL_RCCEx_PeriphCLKConfig+0x130>
          return HAL_TIMEOUT;
 8000f78:	2003      	movs	r0, #3
}
 8000f7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8000f7c:	4011      	ands	r1, r2
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	d002      	beq.n	8000f88 <HAL_RCCEx_PeriphCLKConfig+0x154>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000f82:	6829      	ldr	r1, [r5, #0]
 8000f84:	0689      	lsls	r1, r1, #26
 8000f86:	d408      	bmi.n	8000f9a <HAL_RCCEx_PeriphCLKConfig+0x166>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8000f88:	68a9      	ldr	r1, [r5, #8]
 8000f8a:	400a      	ands	r2, r1
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d100      	bne.n	8000f92 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8000f90:	e787      	b.n	8000ea2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8000f92:	682b      	ldr	r3, [r5, #0]
 8000f94:	051b      	lsls	r3, r3, #20
 8000f96:	d400      	bmi.n	8000f9a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8000f98:	e783      	b.n	8000ea2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f9a:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8000f9c:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f9e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8000fa0:	0312      	lsls	r2, r2, #12
 8000fa2:	4302      	orrs	r2, r0
 8000fa4:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000fa6:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000faa:	4815      	ldr	r0, [pc, #84]	; (8001000 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8000fac:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000fae:	4002      	ands	r2, r0
 8000fb0:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8000fb2:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8000fb4:	05cb      	lsls	r3, r1, #23
 8000fb6:	d400      	bmi.n	8000fba <HAL_RCCEx_PeriphCLKConfig+0x186>
 8000fb8:	e773      	b.n	8000ea2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        tickstart = HAL_GetTick();
 8000fba:	f7ff fa83 	bl	80004c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000fbe:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8000fc0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000fc2:	00bf      	lsls	r7, r7, #2
 8000fc4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000fc6:	423b      	tst	r3, r7
 8000fc8:	d000      	beq.n	8000fcc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8000fca:	e76a      	b.n	8000ea2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fcc:	f7ff fa7a 	bl	80004c4 <HAL_GetTick>
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8000fd2:	1b80      	subs	r0, r0, r6
 8000fd4:	4298      	cmp	r0, r3
 8000fd6:	d9f5      	bls.n	8000fc4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8000fd8:	e7ce      	b.n	8000f78 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40007000 	.word	0x40007000
 8000fe4:	ffcfffff 	.word	0xffcfffff
 8000fe8:	efffffff 	.word	0xefffffff
 8000fec:	fffff3ff 	.word	0xfffff3ff
 8000ff0:	ffffcfff 	.word	0xffffcfff
 8000ff4:	fffcffff 	.word	0xfffcffff
 8000ff8:	fbffffff 	.word	0xfbffffff
 8000ffc:	fff3ffff 	.word	0xfff3ffff
 8001000:	fff7ffff 	.word	0xfff7ffff
 8001004:	00001388 	.word	0x00001388

08001008 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800100a:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800100c:	6925      	ldr	r5, [r4, #16]
 800100e:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8001010:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001012:	432a      	orrs	r2, r5
 8001014:	6965      	ldr	r5, [r4, #20]
 8001016:	69c1      	ldr	r1, [r0, #28]
 8001018:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800101a:	6818      	ldr	r0, [r3, #0]
 800101c:	4d81      	ldr	r5, [pc, #516]	; (8001224 <UART_SetConfig+0x21c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800101e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001020:	4028      	ands	r0, r5
 8001022:	4302      	orrs	r2, r0
 8001024:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	487f      	ldr	r0, [pc, #508]	; (8001228 <UART_SetConfig+0x220>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800102a:	4d80      	ldr	r5, [pc, #512]	; (800122c <UART_SetConfig+0x224>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800102c:	4002      	ands	r2, r0
 800102e:	68e0      	ldr	r0, [r4, #12]
 8001030:	4302      	orrs	r2, r0
 8001032:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001034:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001036:	42ab      	cmp	r3, r5
 8001038:	d001      	beq.n	800103e <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800103a:	6a22      	ldr	r2, [r4, #32]
 800103c:	4310      	orrs	r0, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	4e7b      	ldr	r6, [pc, #492]	; (8001230 <UART_SetConfig+0x228>)
 8001042:	4032      	ands	r2, r6
 8001044:	4302      	orrs	r2, r0
 8001046:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001048:	4a7a      	ldr	r2, [pc, #488]	; (8001234 <UART_SetConfig+0x22c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d113      	bne.n	8001076 <UART_SetConfig+0x6e>
 800104e:	2203      	movs	r2, #3
 8001050:	4b79      	ldr	r3, [pc, #484]	; (8001238 <UART_SetConfig+0x230>)
 8001052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001054:	4013      	ands	r3, r2
 8001056:	4a79      	ldr	r2, [pc, #484]	; (800123c <UART_SetConfig+0x234>)
 8001058:	5cd0      	ldrb	r0, [r2, r3]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	4299      	cmp	r1, r3
 8001060:	d100      	bne.n	8001064 <UART_SetConfig+0x5c>
 8001062:	e0d1      	b.n	8001208 <UART_SetConfig+0x200>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8001064:	2808      	cmp	r0, #8
 8001066:	d826      	bhi.n	80010b6 <UART_SetConfig+0xae>
 8001068:	f7ff f84e 	bl	8000108 <__gnu_thumb1_case_uqi>
 800106c:	259996c0 	.word	0x259996c0
 8001070:	252525b4 	.word	0x252525b4
 8001074:	b7          	.byte	0xb7
 8001075:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001076:	4a72      	ldr	r2, [pc, #456]	; (8001240 <UART_SetConfig+0x238>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d105      	bne.n	8001088 <UART_SetConfig+0x80>
 800107c:	220c      	movs	r2, #12
 800107e:	4b6e      	ldr	r3, [pc, #440]	; (8001238 <UART_SetConfig+0x230>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	4013      	ands	r3, r2
 8001084:	4a6f      	ldr	r2, [pc, #444]	; (8001244 <UART_SetConfig+0x23c>)
 8001086:	e7e7      	b.n	8001058 <UART_SetConfig+0x50>
 8001088:	4a6f      	ldr	r2, [pc, #444]	; (8001248 <UART_SetConfig+0x240>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d100      	bne.n	8001090 <UART_SetConfig+0x88>
 800108e:	e0a9      	b.n	80011e4 <UART_SetConfig+0x1dc>
 8001090:	4a6e      	ldr	r2, [pc, #440]	; (800124c <UART_SetConfig+0x244>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d100      	bne.n	8001098 <UART_SetConfig+0x90>
 8001096:	e0a5      	b.n	80011e4 <UART_SetConfig+0x1dc>
 8001098:	42ab      	cmp	r3, r5
 800109a:	d000      	beq.n	800109e <UART_SetConfig+0x96>
 800109c:	e0ad      	b.n	80011fa <UART_SetConfig+0x1f2>
 800109e:	21c0      	movs	r1, #192	; 0xc0
 80010a0:	2080      	movs	r0, #128	; 0x80
 80010a2:	4a65      	ldr	r2, [pc, #404]	; (8001238 <UART_SetConfig+0x230>)
 80010a4:	0109      	lsls	r1, r1, #4
 80010a6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80010a8:	00c0      	lsls	r0, r0, #3
 80010aa:	400b      	ands	r3, r1
 80010ac:	4283      	cmp	r3, r0
 80010ae:	d038      	beq.n	8001122 <UART_SetConfig+0x11a>
 80010b0:	d803      	bhi.n	80010ba <UART_SetConfig+0xb2>
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00a      	beq.n	80010cc <UART_SetConfig+0xc4>
        ret = HAL_ERROR;
 80010b6:	2501      	movs	r5, #1
 80010b8:	e00d      	b.n	80010d6 <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80010ba:	2080      	movs	r0, #128	; 0x80
 80010bc:	0100      	lsls	r0, r0, #4
 80010be:	4283      	cmp	r3, r0
 80010c0:	d00e      	beq.n	80010e0 <UART_SetConfig+0xd8>
 80010c2:	428b      	cmp	r3, r1
 80010c4:	d1f7      	bne.n	80010b6 <UART_SetConfig+0xae>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80010c6:	2080      	movs	r0, #128	; 0x80
 80010c8:	0200      	lsls	r0, r0, #8
 80010ca:	e00d      	b.n	80010e8 <UART_SetConfig+0xe0>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80010cc:	f7ff fe92 	bl	8000df4 <HAL_RCC_GetPCLK1Freq>
 80010d0:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 80010d2:	42a8      	cmp	r0, r5
 80010d4:	d108      	bne.n	80010e8 <UART_SetConfig+0xe0>
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80010d6:	2300      	movs	r3, #0
  huart->TxISR = NULL;

  return ret;
}
 80010d8:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 80010da:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80010dc:	6663      	str	r3, [r4, #100]	; 0x64
}
 80010de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80010e0:	6813      	ldr	r3, [r2, #0]
 80010e2:	06db      	lsls	r3, r3, #27
 80010e4:	d520      	bpl.n	8001128 <UART_SetConfig+0x120>
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 80010e6:	485a      	ldr	r0, [pc, #360]	; (8001250 <UART_SetConfig+0x248>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80010e8:	2203      	movs	r2, #3
 80010ea:	6863      	ldr	r3, [r4, #4]
 80010ec:	435a      	muls	r2, r3
 80010ee:	4282      	cmp	r2, r0
 80010f0:	d8e1      	bhi.n	80010b6 <UART_SetConfig+0xae>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80010f2:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80010f4:	4282      	cmp	r2, r0
 80010f6:	d3de      	bcc.n	80010b6 <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80010f8:	2700      	movs	r7, #0
 80010fa:	0e02      	lsrs	r2, r0, #24
 80010fc:	0201      	lsls	r1, r0, #8
 80010fe:	085e      	lsrs	r6, r3, #1
 8001100:	1989      	adds	r1, r1, r6
 8001102:	417a      	adcs	r2, r7
 8001104:	0008      	movs	r0, r1
 8001106:	0011      	movs	r1, r2
 8001108:	001a      	movs	r2, r3
 800110a:	003b      	movs	r3, r7
 800110c:	f7ff f89c 	bl	8000248 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001110:	4b50      	ldr	r3, [pc, #320]	; (8001254 <UART_SetConfig+0x24c>)
 8001112:	18c2      	adds	r2, r0, r3
 8001114:	4b50      	ldr	r3, [pc, #320]	; (8001258 <UART_SetConfig+0x250>)
 8001116:	429a      	cmp	r2, r3
 8001118:	d8cd      	bhi.n	80010b6 <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 800111a:	6823      	ldr	r3, [r4, #0]
 800111c:	003d      	movs	r5, r7
 800111e:	60d8      	str	r0, [r3, #12]
 8001120:	e7d9      	b.n	80010d6 <UART_SetConfig+0xce>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001122:	f7ff faeb 	bl	80006fc <HAL_RCC_GetSysClockFreq>
        break;
 8001126:	e7d3      	b.n	80010d0 <UART_SetConfig+0xc8>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001128:	484c      	ldr	r0, [pc, #304]	; (800125c <UART_SetConfig+0x254>)
 800112a:	e7dd      	b.n	80010e8 <UART_SetConfig+0xe0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800112c:	f7ff fe62 	bl	8000df4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001130:	6863      	ldr	r3, [r4, #4]
 8001132:	0040      	lsls	r0, r0, #1
 8001134:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001136:	18c0      	adds	r0, r0, r3
 8001138:	6861      	ldr	r1, [r4, #4]
 800113a:	e00b      	b.n	8001154 <UART_SetConfig+0x14c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800113c:	f7ff fe6a 	bl	8000e14 <HAL_RCC_GetPCLK2Freq>
 8001140:	e7f6      	b.n	8001130 <UART_SetConfig+0x128>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001142:	2510      	movs	r5, #16
 8001144:	4b3c      	ldr	r3, [pc, #240]	; (8001238 <UART_SetConfig+0x230>)
 8001146:	6861      	ldr	r1, [r4, #4]
 8001148:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800114a:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800114c:	4015      	ands	r5, r2
 800114e:	d006      	beq.n	800115e <UART_SetConfig+0x156>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001150:	4b43      	ldr	r3, [pc, #268]	; (8001260 <UART_SetConfig+0x258>)
 8001152:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001154:	f7fe ffec 	bl	8000130 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8001158:	2500      	movs	r5, #0
 800115a:	b283      	uxth	r3, r0
        break;
 800115c:	e004      	b.n	8001168 <UART_SetConfig+0x160>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800115e:	4b41      	ldr	r3, [pc, #260]	; (8001264 <UART_SetConfig+0x25c>)
 8001160:	18c0      	adds	r0, r0, r3
 8001162:	f7fe ffe5 	bl	8000130 <__udivsi3>
 8001166:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001168:	0019      	movs	r1, r3
 800116a:	483f      	ldr	r0, [pc, #252]	; (8001268 <UART_SetConfig+0x260>)
 800116c:	3910      	subs	r1, #16
 800116e:	4281      	cmp	r1, r0
 8001170:	d8a1      	bhi.n	80010b6 <UART_SetConfig+0xae>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001172:	210f      	movs	r1, #15
 8001174:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001176:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001178:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800117a:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 800117c:	6821      	ldr	r1, [r4, #0]
 800117e:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 8001180:	60cb      	str	r3, [r1, #12]
 8001182:	e7a8      	b.n	80010d6 <UART_SetConfig+0xce>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001184:	f7ff faba 	bl	80006fc <HAL_RCC_GetSysClockFreq>
 8001188:	e7d2      	b.n	8001130 <UART_SetConfig+0x128>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800118a:	6863      	ldr	r3, [r4, #4]
 800118c:	0858      	lsrs	r0, r3, #1
 800118e:	2380      	movs	r3, #128	; 0x80
 8001190:	025b      	lsls	r3, r3, #9
 8001192:	e7d0      	b.n	8001136 <UART_SetConfig+0x12e>
  uint32_t usartdiv                   = 0x00000000U;
 8001194:	2300      	movs	r3, #0
 8001196:	e7e7      	b.n	8001168 <UART_SetConfig+0x160>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001198:	f7ff fe3c 	bl	8000e14 <HAL_RCC_GetPCLK2Freq>
 800119c:	e028      	b.n	80011f0 <UART_SetConfig+0x1e8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800119e:	2510      	movs	r5, #16
 80011a0:	4b25      	ldr	r3, [pc, #148]	; (8001238 <UART_SetConfig+0x230>)
 80011a2:	6861      	ldr	r1, [r4, #4]
 80011a4:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80011a6:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80011a8:	4015      	ands	r5, r2
 80011aa:	d006      	beq.n	80011ba <UART_SetConfig+0x1b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80011ac:	4b28      	ldr	r3, [pc, #160]	; (8001250 <UART_SetConfig+0x248>)
 80011ae:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80011b0:	f7fe ffbe 	bl	8000130 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 80011b4:	2500      	movs	r5, #0
 80011b6:	b283      	uxth	r3, r0
        break;
 80011b8:	e004      	b.n	80011c4 <UART_SetConfig+0x1bc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80011ba:	4b28      	ldr	r3, [pc, #160]	; (800125c <UART_SetConfig+0x254>)
 80011bc:	18c0      	adds	r0, r0, r3
 80011be:	f7fe ffb7 	bl	8000130 <__udivsi3>
 80011c2:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80011c4:	0019      	movs	r1, r3
 80011c6:	4828      	ldr	r0, [pc, #160]	; (8001268 <UART_SetConfig+0x260>)
 80011c8:	3910      	subs	r1, #16
 80011ca:	4281      	cmp	r1, r0
 80011cc:	d900      	bls.n	80011d0 <UART_SetConfig+0x1c8>
 80011ce:	e772      	b.n	80010b6 <UART_SetConfig+0xae>
      huart->Instance->BRR = usartdiv;
 80011d0:	6821      	ldr	r1, [r4, #0]
 80011d2:	e7d5      	b.n	8001180 <UART_SetConfig+0x178>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80011d4:	f7ff fa92 	bl	80006fc <HAL_RCC_GetSysClockFreq>
 80011d8:	e00a      	b.n	80011f0 <UART_SetConfig+0x1e8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80011da:	6863      	ldr	r3, [r4, #4]
 80011dc:	0858      	lsrs	r0, r3, #1
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	e007      	b.n	80011f4 <UART_SetConfig+0x1ec>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	4299      	cmp	r1, r3
 80011ea:	d09f      	beq.n	800112c <UART_SetConfig+0x124>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80011ec:	f7ff fe02 	bl	8000df4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80011f0:	6863      	ldr	r3, [r4, #4]
 80011f2:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80011f4:	18c0      	adds	r0, r0, r3
 80011f6:	6861      	ldr	r1, [r4, #4]
 80011f8:	e7da      	b.n	80011b0 <UART_SetConfig+0x1a8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011fa:	2380      	movs	r3, #128	; 0x80
        ret = HAL_ERROR;
 80011fc:	2501      	movs	r5, #1
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	4299      	cmp	r1, r3
 8001202:	d0c7      	beq.n	8001194 <UART_SetConfig+0x18c>
  uint32_t usartdiv                   = 0x00000000U;
 8001204:	2300      	movs	r3, #0
 8001206:	e7dd      	b.n	80011c4 <UART_SetConfig+0x1bc>
    switch (clocksource)
 8001208:	2808      	cmp	r0, #8
 800120a:	d900      	bls.n	800120e <UART_SetConfig+0x206>
 800120c:	e753      	b.n	80010b6 <UART_SetConfig+0xae>
 800120e:	f7fe ff85 	bl	800011c <__gnu_thumb1_case_shi>
 8001212:	ff8d      	.short	0xff8d
 8001214:	ff98ff95 	.word	0xff98ff95
 8001218:	ffb9ff52 	.word	0xffb9ff52
 800121c:	ff52ff52 	.word	0xff52ff52
 8001220:	ffbcff52 	.word	0xffbcff52
 8001224:	efff69f3 	.word	0xefff69f3
 8001228:	ffffcfff 	.word	0xffffcfff
 800122c:	40004800 	.word	0x40004800
 8001230:	fffff4ff 	.word	0xfffff4ff
 8001234:	40013800 	.word	0x40013800
 8001238:	40021000 	.word	0x40021000
 800123c:	080026b8 	.word	0x080026b8
 8001240:	40004400 	.word	0x40004400
 8001244:	080026bc 	.word	0x080026bc
 8001248:	40004c00 	.word	0x40004c00
 800124c:	40005000 	.word	0x40005000
 8001250:	003d0900 	.word	0x003d0900
 8001254:	fffffd00 	.word	0xfffffd00
 8001258:	000ffcff 	.word	0x000ffcff
 800125c:	00f42400 	.word	0x00f42400
 8001260:	007a1200 	.word	0x007a1200
 8001264:	01e84800 	.word	0x01e84800
 8001268:	0000ffef 	.word	0x0000ffef

0800126c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800126c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800126e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001270:	07da      	lsls	r2, r3, #31
 8001272:	d506      	bpl.n	8001282 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001274:	6801      	ldr	r1, [r0, #0]
 8001276:	4c28      	ldr	r4, [pc, #160]	; (8001318 <UART_AdvFeatureConfig+0xac>)
 8001278:	684a      	ldr	r2, [r1, #4]
 800127a:	4022      	ands	r2, r4
 800127c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800127e:	4322      	orrs	r2, r4
 8001280:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001282:	079a      	lsls	r2, r3, #30
 8001284:	d506      	bpl.n	8001294 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001286:	6801      	ldr	r1, [r0, #0]
 8001288:	4c24      	ldr	r4, [pc, #144]	; (800131c <UART_AdvFeatureConfig+0xb0>)
 800128a:	684a      	ldr	r2, [r1, #4]
 800128c:	4022      	ands	r2, r4
 800128e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001290:	4322      	orrs	r2, r4
 8001292:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001294:	075a      	lsls	r2, r3, #29
 8001296:	d506      	bpl.n	80012a6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001298:	6801      	ldr	r1, [r0, #0]
 800129a:	4c21      	ldr	r4, [pc, #132]	; (8001320 <UART_AdvFeatureConfig+0xb4>)
 800129c:	684a      	ldr	r2, [r1, #4]
 800129e:	4022      	ands	r2, r4
 80012a0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80012a2:	4322      	orrs	r2, r4
 80012a4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80012a6:	071a      	lsls	r2, r3, #28
 80012a8:	d506      	bpl.n	80012b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80012aa:	6801      	ldr	r1, [r0, #0]
 80012ac:	4c1d      	ldr	r4, [pc, #116]	; (8001324 <UART_AdvFeatureConfig+0xb8>)
 80012ae:	684a      	ldr	r2, [r1, #4]
 80012b0:	4022      	ands	r2, r4
 80012b2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80012b4:	4322      	orrs	r2, r4
 80012b6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80012b8:	06da      	lsls	r2, r3, #27
 80012ba:	d506      	bpl.n	80012ca <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80012bc:	6801      	ldr	r1, [r0, #0]
 80012be:	4c1a      	ldr	r4, [pc, #104]	; (8001328 <UART_AdvFeatureConfig+0xbc>)
 80012c0:	688a      	ldr	r2, [r1, #8]
 80012c2:	4022      	ands	r2, r4
 80012c4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80012c6:	4322      	orrs	r2, r4
 80012c8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80012ca:	069a      	lsls	r2, r3, #26
 80012cc:	d506      	bpl.n	80012dc <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80012ce:	6801      	ldr	r1, [r0, #0]
 80012d0:	4c16      	ldr	r4, [pc, #88]	; (800132c <UART_AdvFeatureConfig+0xc0>)
 80012d2:	688a      	ldr	r2, [r1, #8]
 80012d4:	4022      	ands	r2, r4
 80012d6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80012d8:	4322      	orrs	r2, r4
 80012da:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80012dc:	065a      	lsls	r2, r3, #25
 80012de:	d510      	bpl.n	8001302 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80012e0:	6801      	ldr	r1, [r0, #0]
 80012e2:	4d13      	ldr	r5, [pc, #76]	; (8001330 <UART_AdvFeatureConfig+0xc4>)
 80012e4:	684a      	ldr	r2, [r1, #4]
 80012e6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80012e8:	402a      	ands	r2, r5
 80012ea:	4322      	orrs	r2, r4
 80012ec:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80012ee:	2280      	movs	r2, #128	; 0x80
 80012f0:	0352      	lsls	r2, r2, #13
 80012f2:	4294      	cmp	r4, r2
 80012f4:	d105      	bne.n	8001302 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80012f6:	684a      	ldr	r2, [r1, #4]
 80012f8:	4c0e      	ldr	r4, [pc, #56]	; (8001334 <UART_AdvFeatureConfig+0xc8>)
 80012fa:	4022      	ands	r2, r4
 80012fc:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80012fe:	4322      	orrs	r2, r4
 8001300:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001302:	061b      	lsls	r3, r3, #24
 8001304:	d506      	bpl.n	8001314 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001306:	6802      	ldr	r2, [r0, #0]
 8001308:	490b      	ldr	r1, [pc, #44]	; (8001338 <UART_AdvFeatureConfig+0xcc>)
 800130a:	6853      	ldr	r3, [r2, #4]
 800130c:	400b      	ands	r3, r1
 800130e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001310:	430b      	orrs	r3, r1
 8001312:	6053      	str	r3, [r2, #4]
  }
}
 8001314:	bd30      	pop	{r4, r5, pc}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	fffdffff 	.word	0xfffdffff
 800131c:	fffeffff 	.word	0xfffeffff
 8001320:	fffbffff 	.word	0xfffbffff
 8001324:	ffff7fff 	.word	0xffff7fff
 8001328:	ffffefff 	.word	0xffffefff
 800132c:	ffffdfff 	.word	0xffffdfff
 8001330:	ffefffff 	.word	0xffefffff
 8001334:	ff9fffff 	.word	0xff9fffff
 8001338:	fff7ffff 	.word	0xfff7ffff

0800133c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800133c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800133e:	0004      	movs	r4, r0
 8001340:	000e      	movs	r6, r1
 8001342:	0015      	movs	r5, r2
 8001344:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001346:	6822      	ldr	r2, [r4, #0]
 8001348:	69d3      	ldr	r3, [r2, #28]
 800134a:	4033      	ands	r3, r6
 800134c:	1b9b      	subs	r3, r3, r6
 800134e:	4259      	negs	r1, r3
 8001350:	414b      	adcs	r3, r1
 8001352:	42ab      	cmp	r3, r5
 8001354:	d001      	beq.n	800135a <UART_WaitOnFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001356:	2000      	movs	r0, #0
 8001358:	e01b      	b.n	8001392 <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800135a:	9b06      	ldr	r3, [sp, #24]
 800135c:	3301      	adds	r3, #1
 800135e:	d0f3      	beq.n	8001348 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001360:	f7ff f8b0 	bl	80004c4 <HAL_GetTick>
 8001364:	9b06      	ldr	r3, [sp, #24]
 8001366:	1bc0      	subs	r0, r0, r7
 8001368:	4283      	cmp	r3, r0
 800136a:	d301      	bcc.n	8001370 <UART_WaitOnFlagUntilTimeout+0x34>
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1ea      	bne.n	8001346 <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001370:	6823      	ldr	r3, [r4, #0]
 8001372:	4908      	ldr	r1, [pc, #32]	; (8001394 <UART_WaitOnFlagUntilTimeout+0x58>)
 8001374:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8001376:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001378:	400a      	ands	r2, r1
 800137a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	31a3      	adds	r1, #163	; 0xa3
 8001380:	31ff      	adds	r1, #255	; 0xff
 8001382:	438a      	bics	r2, r1
 8001384:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001386:	2320      	movs	r3, #32
 8001388:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800138a:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800138c:	2300      	movs	r3, #0
 800138e:	3470      	adds	r4, #112	; 0x70
 8001390:	7023      	strb	r3, [r4, #0]
}
 8001392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001394:	fffffe5f 	.word	0xfffffe5f

08001398 <HAL_UART_Transmit>:
{
 8001398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139a:	b087      	sub	sp, #28
 800139c:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 800139e:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 80013a0:	0004      	movs	r4, r0
 80013a2:	000d      	movs	r5, r1
 80013a4:	0017      	movs	r7, r2
    return HAL_BUSY;
 80013a6:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80013a8:	2b20      	cmp	r3, #32
 80013aa:	d149      	bne.n	8001440 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 80013ac:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80013ae:	2900      	cmp	r1, #0
 80013b0:	d046      	beq.n	8001440 <HAL_UART_Transmit+0xa8>
 80013b2:	2a00      	cmp	r2, #0
 80013b4:	d044      	beq.n	8001440 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	68a2      	ldr	r2, [r4, #8]
 80013ba:	015b      	lsls	r3, r3, #5
 80013bc:	429a      	cmp	r2, r3
 80013be:	d104      	bne.n	80013ca <HAL_UART_Transmit+0x32>
 80013c0:	6923      	ldr	r3, [r4, #16]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 80013c6:	4201      	tst	r1, r0
 80013c8:	d13a      	bne.n	8001440 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 80013ca:	0023      	movs	r3, r4
 80013cc:	3370      	adds	r3, #112	; 0x70
 80013ce:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80013d0:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80013d2:	2a01      	cmp	r2, #1
 80013d4:	d034      	beq.n	8001440 <HAL_UART_Transmit+0xa8>
 80013d6:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013d8:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 80013da:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013dc:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013de:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013e0:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 80013e2:	f7ff f86f 	bl	80004c4 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80013e6:	0023      	movs	r3, r4
 80013e8:	3350      	adds	r3, #80	; 0x50
 80013ea:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 80013ec:	3302      	adds	r3, #2
 80013ee:	9303      	str	r3, [sp, #12]
 80013f0:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013f2:	2380      	movs	r3, #128	; 0x80
 80013f4:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80013f6:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013f8:	015b      	lsls	r3, r3, #5
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d104      	bne.n	8001408 <HAL_UART_Transmit+0x70>
 80013fe:	6923      	ldr	r3, [r4, #16]
 8001400:	42b3      	cmp	r3, r6
 8001402:	d101      	bne.n	8001408 <HAL_UART_Transmit+0x70>
 8001404:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8001406:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8001408:	0023      	movs	r3, r4
 800140a:	3352      	adds	r3, #82	; 0x52
 800140c:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800140e:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 8001410:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 8001416:	2a00      	cmp	r2, #0
 8001418:	d10a      	bne.n	8001430 <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800141a:	2140      	movs	r1, #64	; 0x40
 800141c:	0020      	movs	r0, r4
 800141e:	f7ff ff8d 	bl	800133c <UART_WaitOnFlagUntilTimeout>
 8001422:	2800      	cmp	r0, #0
 8001424:	d10b      	bne.n	800143e <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 8001426:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001428:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 800142a:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 800142c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800142e:	e007      	b.n	8001440 <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001430:	2200      	movs	r2, #0
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	0020      	movs	r0, r4
 8001436:	f7ff ff81 	bl	800133c <UART_WaitOnFlagUntilTimeout>
 800143a:	2800      	cmp	r0, #0
 800143c:	d002      	beq.n	8001444 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 800143e:	2003      	movs	r0, #3
}
 8001440:	b007      	add	sp, #28
 8001442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001444:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8001446:	2d00      	cmp	r5, #0
 8001448:	d10b      	bne.n	8001462 <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800144a:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 800144c:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800144e:	05db      	lsls	r3, r3, #23
 8001450:	0ddb      	lsrs	r3, r3, #23
 8001452:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001454:	9b03      	ldr	r3, [sp, #12]
 8001456:	9a03      	ldr	r2, [sp, #12]
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	3b01      	subs	r3, #1
 800145c:	b29b      	uxth	r3, r3
 800145e:	8013      	strh	r3, [r2, #0]
 8001460:	e7d2      	b.n	8001408 <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001462:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8001464:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001466:	6293      	str	r3, [r2, #40]	; 0x28
 8001468:	e7f4      	b.n	8001454 <HAL_UART_Transmit+0xbc>
	...

0800146c <UART_CheckIdleState>:
{
 800146c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800146e:	2600      	movs	r6, #0
{
 8001470:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001472:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001474:	f7ff f826 	bl	80004c4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001478:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800147a:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	071b      	lsls	r3, r3, #28
 8001480:	d415      	bmi.n	80014ae <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001482:	6823      	ldr	r3, [r4, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	075b      	lsls	r3, r3, #29
 8001488:	d50a      	bpl.n	80014a0 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800148a:	2180      	movs	r1, #128	; 0x80
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <UART_CheckIdleState+0x5c>)
 800148e:	2200      	movs	r2, #0
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	03c9      	lsls	r1, r1, #15
 8001494:	002b      	movs	r3, r5
 8001496:	0020      	movs	r0, r4
 8001498:	f7ff ff50 	bl	800133c <UART_WaitOnFlagUntilTimeout>
 800149c:	2800      	cmp	r0, #0
 800149e:	d111      	bne.n	80014c4 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 80014a0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80014a2:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80014a4:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80014a6:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80014a8:	3470      	adds	r4, #112	; 0x70
 80014aa:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80014ac:	e00b      	b.n	80014c6 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80014ae:	2180      	movs	r1, #128	; 0x80
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <UART_CheckIdleState+0x5c>)
 80014b2:	0032      	movs	r2, r6
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	0389      	lsls	r1, r1, #14
 80014b8:	0003      	movs	r3, r0
 80014ba:	0020      	movs	r0, r4
 80014bc:	f7ff ff3e 	bl	800133c <UART_WaitOnFlagUntilTimeout>
 80014c0:	2800      	cmp	r0, #0
 80014c2:	d0de      	beq.n	8001482 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80014c4:	2003      	movs	r0, #3
}
 80014c6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80014c8:	01ffffff 	.word	0x01ffffff

080014cc <HAL_UART_Init>:
{
 80014cc:	b510      	push	{r4, lr}
 80014ce:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80014d0:	d101      	bne.n	80014d6 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80014d2:	2001      	movs	r0, #1
}
 80014d4:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80014d6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d104      	bne.n	80014e6 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80014dc:	0002      	movs	r2, r0
 80014de:	3270      	adds	r2, #112	; 0x70
 80014e0:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80014e2:	f000 f8b9 	bl	8001658 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80014e6:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80014e8:	2101      	movs	r1, #1
 80014ea:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80014ec:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80014ee:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80014f0:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80014f2:	438b      	bics	r3, r1
 80014f4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80014f6:	f7ff fd87 	bl	8001008 <UART_SetConfig>
 80014fa:	2801      	cmp	r0, #1
 80014fc:	d0e9      	beq.n	80014d2 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80014fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8001504:	0020      	movs	r0, r4
 8001506:	f7ff feb1 	bl	800126c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800150a:	6823      	ldr	r3, [r4, #0]
 800150c:	4907      	ldr	r1, [pc, #28]	; (800152c <HAL_UART_Init+0x60>)
 800150e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001510:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001512:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001514:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001516:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	438a      	bics	r2, r1
 800151c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800151e:	2201      	movs	r2, #1
 8001520:	6819      	ldr	r1, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001526:	f7ff ffa1 	bl	800146c <UART_CheckIdleState>
 800152a:	e7d3      	b.n	80014d4 <HAL_UART_Init+0x8>
 800152c:	ffffb7ff 	.word	0xffffb7ff

08001530 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *data, int len)
{
  HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 1000);
 8001530:	23fa      	movs	r3, #250	; 0xfa
{
 8001532:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 1000);
 8001534:	009b      	lsls	r3, r3, #2
{
 8001536:	0014      	movs	r4, r2
  HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 1000);
 8001538:	4804      	ldr	r0, [pc, #16]	; (800154c <_write+0x1c>)
 800153a:	b292      	uxth	r2, r2
 800153c:	f7ff ff2c 	bl	8001398 <HAL_UART_Transmit>
  return (status == HAL_OK ? len : 0);
 8001540:	4243      	negs	r3, r0
 8001542:	4158      	adcs	r0, r3
 8001544:	4240      	negs	r0, r0
 8001546:	4004      	ands	r4, r0
}
 8001548:	0020      	movs	r0, r4
 800154a:	bd10      	pop	{r4, pc}
 800154c:	20000094 	.word	0x20000094

08001550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001550:	b570      	push	{r4, r5, r6, lr}
 8001552:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001554:	2238      	movs	r2, #56	; 0x38
 8001556:	2100      	movs	r1, #0
 8001558:	a810      	add	r0, sp, #64	; 0x40
 800155a:	f000 f92f 	bl	80017bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800155e:	2214      	movs	r2, #20
 8001560:	2100      	movs	r1, #0
 8001562:	a801      	add	r0, sp, #4
 8001564:	f000 f92a 	bl	80017bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001568:	2228      	movs	r2, #40	; 0x28
 800156a:	2100      	movs	r1, #0
 800156c:	a806      	add	r0, sp, #24
 800156e:	f000 f925 	bl	80017bc <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001572:	4916      	ldr	r1, [pc, #88]	; (80015cc <SystemClock_Config+0x7c>)
 8001574:	4a16      	ldr	r2, [pc, #88]	; (80015d0 <SystemClock_Config+0x80>)
 8001576:	680b      	ldr	r3, [r1, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001578:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800157a:	401a      	ands	r2, r3
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	011b      	lsls	r3, r3, #4
 8001580:	4313      	orrs	r3, r2
 8001582:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001584:	2310      	movs	r3, #16
 8001586:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	02db      	lsls	r3, r3, #11
 800158c:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800158e:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001590:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001592:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001594:	03db      	lsls	r3, r3, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001596:	a810      	add	r0, sp, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001598:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800159a:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800159c:	9613      	str	r6, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159e:	951a      	str	r5, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015a0:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a2:	f7ff f8e7 	bl	8000774 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a6:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015a8:	0031      	movs	r1, r6
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015aa:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015ac:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ae:	3b0c      	subs	r3, #12
 80015b0:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b2:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015b4:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015b6:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015b8:	f7ff fb64 	bl	8000c84 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015bc:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015be:	9506      	str	r5, [sp, #24]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015c0:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c2:	f7ff fc37 	bl	8000e34 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80015c6:	b01e      	add	sp, #120	; 0x78
 80015c8:	bd70      	pop	{r4, r5, r6, pc}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	40007000 	.word	0x40007000
 80015d0:	ffffe7ff 	.word	0xffffe7ff

080015d4 <main>:
{
 80015d4:	b513      	push	{r0, r1, r4, lr}
  HAL_Init();
 80015d6:	f7fe ff59 	bl	800048c <HAL_Init>
  SystemClock_Config();
 80015da:	f7ff ffb9 	bl	8001550 <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	2001      	movs	r0, #1
 80015e0:	4a12      	ldr	r2, [pc, #72]	; (800162c <main+0x58>)
    HAL_Delay(1000);
 80015e2:	24fa      	movs	r4, #250	; 0xfa
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    HAL_Delay(1000);
 80015e6:	00a4      	lsls	r4, r4, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e8:	4301      	orrs	r1, r0
 80015ea:	62d1      	str	r1, [r2, #44]	; 0x2c
 80015ec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015ee:	220c      	movs	r2, #12
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f0:	4003      	ands	r3, r0
 80015f2:	9301      	str	r3, [sp, #4]
  huart2.Instance = USART2;
 80015f4:	480e      	ldr	r0, [pc, #56]	; (8001630 <main+0x5c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	9b01      	ldr	r3, [sp, #4]
  huart2.Instance = USART2;
 80015f8:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <main+0x60>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015fa:	6142      	str	r2, [r0, #20]
  huart2.Instance = USART2;
 80015fc:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 80015fe:	2396      	movs	r3, #150	; 0x96
 8001600:	019b      	lsls	r3, r3, #6
 8001602:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001604:	2300      	movs	r3, #0
 8001606:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001608:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800160a:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160c:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800160e:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001610:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001612:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001614:	f7ff ff5a 	bl	80014cc <HAL_UART_Init>
    printf("Hello, World! %6d\r\n", HAL_GetTick());
 8001618:	f7fe ff54 	bl	80004c4 <HAL_GetTick>
 800161c:	0001      	movs	r1, r0
 800161e:	4806      	ldr	r0, [pc, #24]	; (8001638 <main+0x64>)
 8001620:	f000 f8d4 	bl	80017cc <iprintf>
    HAL_Delay(1000);
 8001624:	0020      	movs	r0, r4
 8001626:	f7fe ff53 	bl	80004d0 <HAL_Delay>
 800162a:	e7f5      	b.n	8001618 <main+0x44>
 800162c:	40021000 	.word	0x40021000
 8001630:	20000094 	.word	0x20000094
 8001634:	40004400 	.word	0x40004400
 8001638:	080026c9 	.word	0x080026c9

0800163c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163c:	2201      	movs	r2, #1
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_MspInit+0x18>)
 8001640:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001642:	430a      	orrs	r2, r1
 8001644:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	2280      	movs	r2, #128	; 0x80
 8001648:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800164a:	0552      	lsls	r2, r2, #21
 800164c:	430a      	orrs	r2, r1
 800164e:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001650:	4770      	bx	lr
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	40021000 	.word	0x40021000

08001658 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001658:	b510      	push	{r4, lr}
 800165a:	0004      	movs	r4, r0
 800165c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	2214      	movs	r2, #20
 8001660:	2100      	movs	r1, #0
 8001662:	a801      	add	r0, sp, #4
 8001664:	f000 f8aa 	bl	80017bc <memset>
  if(huart->Instance==USART2)
 8001668:	4b10      	ldr	r3, [pc, #64]	; (80016ac <HAL_UART_MspInit+0x54>)
 800166a:	6822      	ldr	r2, [r4, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d11a      	bne.n	80016a6 <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001670:	2280      	movs	r2, #128	; 0x80
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <HAL_UART_MspInit+0x58>)
 8001674:	0292      	lsls	r2, r2, #10
 8001676:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 800167a:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167c:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 800167e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001684:	430a      	orrs	r2, r1
 8001686:	62da      	str	r2, [r3, #44]	; 0x2c
 8001688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168a:	400b      	ands	r3, r1
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001690:	230c      	movs	r3, #12
 8001692:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	3b0a      	subs	r3, #10
 8001696:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001698:	185b      	adds	r3, r3, r1
 800169a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800169c:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80016a0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	f7fe ff6f 	bl	8000584 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016a6:	b006      	add	sp, #24
 80016a8:	bd10      	pop	{r4, pc}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	40004400 	.word	0x40004400
 80016b0:	40021000 	.word	0x40021000

080016b4 <NMI_Handler>:
 80016b4:	4770      	bx	lr

080016b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b6:	e7fe      	b.n	80016b6 <HardFault_Handler>

080016b8 <SVC_Handler>:
 80016b8:	4770      	bx	lr

080016ba <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ba:	4770      	bx	lr

080016bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016bc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016be:	f7fe fef9 	bl	80004b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c2:	bd10      	pop	{r4, pc}

080016c4 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80016c4:	2280      	movs	r2, #128	; 0x80
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <SystemInit+0x44>)
 80016c8:	0052      	lsls	r2, r2, #1
 80016ca:	6819      	ldr	r1, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	490e      	ldr	r1, [pc, #56]	; (800170c <SystemInit+0x48>)
 80016d4:	400a      	ands	r2, r1
 80016d6:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	490d      	ldr	r1, [pc, #52]	; (8001710 <SystemInit+0x4c>)
 80016dc:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80016de:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80016e0:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	438a      	bics	r2, r1
 80016e6:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	490a      	ldr	r1, [pc, #40]	; (8001714 <SystemInit+0x50>)
 80016ec:	400a      	ands	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80016f0:	68da      	ldr	r2, [r3, #12]
 80016f2:	4909      	ldr	r1, [pc, #36]	; (8001718 <SystemInit+0x54>)
 80016f4:	400a      	ands	r2, r1
 80016f6:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016fc:	2280      	movs	r2, #128	; 0x80
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <SystemInit+0x58>)
 8001700:	0512      	lsls	r2, r2, #20
 8001702:	609a      	str	r2, [r3, #8]
#endif
}
 8001704:	4770      	bx	lr
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	40021000 	.word	0x40021000
 800170c:	88ff400c 	.word	0x88ff400c
 8001710:	fef6fff6 	.word	0xfef6fff6
 8001714:	fffbffff 	.word	0xfffbffff
 8001718:	ff02ffff 	.word	0xff02ffff
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001720:	480d      	ldr	r0, [pc, #52]	; (8001758 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001722:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001724:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001726:	e003      	b.n	8001730 <LoopCopyDataInit>

08001728 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800172a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800172c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800172e:	3104      	adds	r1, #4

08001730 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001730:	480b      	ldr	r0, [pc, #44]	; (8001760 <LoopForever+0xa>)
  ldr  r3, =_edata
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <LoopForever+0xe>)
  adds  r2, r0, r1
 8001734:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001736:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001738:	d3f6      	bcc.n	8001728 <CopyDataInit>
  ldr  r2, =_sbss
 800173a:	4a0b      	ldr	r2, [pc, #44]	; (8001768 <LoopForever+0x12>)
  b  LoopFillZerobss
 800173c:	e002      	b.n	8001744 <LoopFillZerobss>

0800173e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800173e:	2300      	movs	r3, #0
  str  r3, [r2]
 8001740:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001742:	3204      	adds	r2, #4

08001744 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <LoopForever+0x16>)
  cmp  r2, r3
 8001746:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001748:	d3f9      	bcc.n	800173e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800174a:	f7ff ffbb 	bl	80016c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800174e:	f000 f811 	bl	8001774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001752:	f7ff ff3f 	bl	80015d4 <main>

08001756 <LoopForever>:

LoopForever:
    b LoopForever
 8001756:	e7fe      	b.n	8001756 <LoopForever>
   ldr   r0, =_estack
 8001758:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 800175c:	080027a8 	.word	0x080027a8
  ldr  r0, =_sdata
 8001760:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001764:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8001768:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 800176c:	20000118 	.word	0x20000118

08001770 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001770:	e7fe      	b.n	8001770 <ADC1_COMP_IRQHandler>
	...

08001774 <__libc_init_array>:
 8001774:	b570      	push	{r4, r5, r6, lr}
 8001776:	2600      	movs	r6, #0
 8001778:	4d0c      	ldr	r5, [pc, #48]	; (80017ac <__libc_init_array+0x38>)
 800177a:	4c0d      	ldr	r4, [pc, #52]	; (80017b0 <__libc_init_array+0x3c>)
 800177c:	1b64      	subs	r4, r4, r5
 800177e:	10a4      	asrs	r4, r4, #2
 8001780:	42a6      	cmp	r6, r4
 8001782:	d109      	bne.n	8001798 <__libc_init_array+0x24>
 8001784:	2600      	movs	r6, #0
 8001786:	f000 ff8b 	bl	80026a0 <_init>
 800178a:	4d0a      	ldr	r5, [pc, #40]	; (80017b4 <__libc_init_array+0x40>)
 800178c:	4c0a      	ldr	r4, [pc, #40]	; (80017b8 <__libc_init_array+0x44>)
 800178e:	1b64      	subs	r4, r4, r5
 8001790:	10a4      	asrs	r4, r4, #2
 8001792:	42a6      	cmp	r6, r4
 8001794:	d105      	bne.n	80017a2 <__libc_init_array+0x2e>
 8001796:	bd70      	pop	{r4, r5, r6, pc}
 8001798:	00b3      	lsls	r3, r6, #2
 800179a:	58eb      	ldr	r3, [r5, r3]
 800179c:	4798      	blx	r3
 800179e:	3601      	adds	r6, #1
 80017a0:	e7ee      	b.n	8001780 <__libc_init_array+0xc>
 80017a2:	00b3      	lsls	r3, r6, #2
 80017a4:	58eb      	ldr	r3, [r5, r3]
 80017a6:	4798      	blx	r3
 80017a8:	3601      	adds	r6, #1
 80017aa:	e7f2      	b.n	8001792 <__libc_init_array+0x1e>
 80017ac:	080027a0 	.word	0x080027a0
 80017b0:	080027a0 	.word	0x080027a0
 80017b4:	080027a0 	.word	0x080027a0
 80017b8:	080027a4 	.word	0x080027a4

080017bc <memset>:
 80017bc:	0003      	movs	r3, r0
 80017be:	1882      	adds	r2, r0, r2
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d100      	bne.n	80017c6 <memset+0xa>
 80017c4:	4770      	bx	lr
 80017c6:	7019      	strb	r1, [r3, #0]
 80017c8:	3301      	adds	r3, #1
 80017ca:	e7f9      	b.n	80017c0 <memset+0x4>

080017cc <iprintf>:
 80017cc:	b40f      	push	{r0, r1, r2, r3}
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <iprintf+0x30>)
 80017d0:	b513      	push	{r0, r1, r4, lr}
 80017d2:	681c      	ldr	r4, [r3, #0]
 80017d4:	2c00      	cmp	r4, #0
 80017d6:	d005      	beq.n	80017e4 <iprintf+0x18>
 80017d8:	69a3      	ldr	r3, [r4, #24]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d102      	bne.n	80017e4 <iprintf+0x18>
 80017de:	0020      	movs	r0, r4
 80017e0:	f000 f850 	bl	8001884 <__sinit>
 80017e4:	ab05      	add	r3, sp, #20
 80017e6:	9a04      	ldr	r2, [sp, #16]
 80017e8:	68a1      	ldr	r1, [r4, #8]
 80017ea:	0020      	movs	r0, r4
 80017ec:	9301      	str	r3, [sp, #4]
 80017ee:	f000 f965 	bl	8001abc <_vfiprintf_r>
 80017f2:	bc16      	pop	{r1, r2, r4}
 80017f4:	bc08      	pop	{r3}
 80017f6:	b004      	add	sp, #16
 80017f8:	4718      	bx	r3
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	20000004 	.word	0x20000004

08001800 <_cleanup_r>:
 8001800:	b510      	push	{r4, lr}
 8001802:	4902      	ldr	r1, [pc, #8]	; (800180c <_cleanup_r+0xc>)
 8001804:	f000 f8b2 	bl	800196c <_fwalk_reent>
 8001808:	bd10      	pop	{r4, pc}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	080023b9 	.word	0x080023b9

08001810 <std.isra.0>:
 8001810:	2300      	movs	r3, #0
 8001812:	b510      	push	{r4, lr}
 8001814:	0004      	movs	r4, r0
 8001816:	6003      	str	r3, [r0, #0]
 8001818:	6043      	str	r3, [r0, #4]
 800181a:	6083      	str	r3, [r0, #8]
 800181c:	8181      	strh	r1, [r0, #12]
 800181e:	6643      	str	r3, [r0, #100]	; 0x64
 8001820:	81c2      	strh	r2, [r0, #14]
 8001822:	6103      	str	r3, [r0, #16]
 8001824:	6143      	str	r3, [r0, #20]
 8001826:	6183      	str	r3, [r0, #24]
 8001828:	0019      	movs	r1, r3
 800182a:	2208      	movs	r2, #8
 800182c:	305c      	adds	r0, #92	; 0x5c
 800182e:	f7ff ffc5 	bl	80017bc <memset>
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <std.isra.0+0x38>)
 8001834:	6224      	str	r4, [r4, #32]
 8001836:	6263      	str	r3, [r4, #36]	; 0x24
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <std.isra.0+0x3c>)
 800183a:	62a3      	str	r3, [r4, #40]	; 0x28
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <std.isra.0+0x40>)
 800183e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001840:	4b04      	ldr	r3, [pc, #16]	; (8001854 <std.isra.0+0x44>)
 8001842:	6323      	str	r3, [r4, #48]	; 0x30
 8001844:	bd10      	pop	{r4, pc}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	08002029 	.word	0x08002029
 800184c:	08002051 	.word	0x08002051
 8001850:	08002089 	.word	0x08002089
 8001854:	080020b5 	.word	0x080020b5

08001858 <__sfmoreglue>:
 8001858:	b570      	push	{r4, r5, r6, lr}
 800185a:	2568      	movs	r5, #104	; 0x68
 800185c:	1e4a      	subs	r2, r1, #1
 800185e:	4355      	muls	r5, r2
 8001860:	000e      	movs	r6, r1
 8001862:	0029      	movs	r1, r5
 8001864:	3174      	adds	r1, #116	; 0x74
 8001866:	f000 f8a3 	bl	80019b0 <_malloc_r>
 800186a:	1e04      	subs	r4, r0, #0
 800186c:	d008      	beq.n	8001880 <__sfmoreglue+0x28>
 800186e:	2100      	movs	r1, #0
 8001870:	002a      	movs	r2, r5
 8001872:	6001      	str	r1, [r0, #0]
 8001874:	6046      	str	r6, [r0, #4]
 8001876:	300c      	adds	r0, #12
 8001878:	60a0      	str	r0, [r4, #8]
 800187a:	3268      	adds	r2, #104	; 0x68
 800187c:	f7ff ff9e 	bl	80017bc <memset>
 8001880:	0020      	movs	r0, r4
 8001882:	bd70      	pop	{r4, r5, r6, pc}

08001884 <__sinit>:
 8001884:	6983      	ldr	r3, [r0, #24]
 8001886:	b513      	push	{r0, r1, r4, lr}
 8001888:	0004      	movs	r4, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d128      	bne.n	80018e0 <__sinit+0x5c>
 800188e:	6483      	str	r3, [r0, #72]	; 0x48
 8001890:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001892:	6503      	str	r3, [r0, #80]	; 0x50
 8001894:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <__sinit+0x60>)
 8001896:	4a14      	ldr	r2, [pc, #80]	; (80018e8 <__sinit+0x64>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6282      	str	r2, [r0, #40]	; 0x28
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	4298      	cmp	r0, r3
 80018a0:	d101      	bne.n	80018a6 <__sinit+0x22>
 80018a2:	2301      	movs	r3, #1
 80018a4:	6183      	str	r3, [r0, #24]
 80018a6:	0020      	movs	r0, r4
 80018a8:	f000 f820 	bl	80018ec <__sfp>
 80018ac:	6060      	str	r0, [r4, #4]
 80018ae:	0020      	movs	r0, r4
 80018b0:	f000 f81c 	bl	80018ec <__sfp>
 80018b4:	60a0      	str	r0, [r4, #8]
 80018b6:	0020      	movs	r0, r4
 80018b8:	f000 f818 	bl	80018ec <__sfp>
 80018bc:	2200      	movs	r2, #0
 80018be:	60e0      	str	r0, [r4, #12]
 80018c0:	2104      	movs	r1, #4
 80018c2:	6860      	ldr	r0, [r4, #4]
 80018c4:	f7ff ffa4 	bl	8001810 <std.isra.0>
 80018c8:	2201      	movs	r2, #1
 80018ca:	2109      	movs	r1, #9
 80018cc:	68a0      	ldr	r0, [r4, #8]
 80018ce:	f7ff ff9f 	bl	8001810 <std.isra.0>
 80018d2:	2202      	movs	r2, #2
 80018d4:	2112      	movs	r1, #18
 80018d6:	68e0      	ldr	r0, [r4, #12]
 80018d8:	f7ff ff9a 	bl	8001810 <std.isra.0>
 80018dc:	2301      	movs	r3, #1
 80018de:	61a3      	str	r3, [r4, #24]
 80018e0:	bd13      	pop	{r0, r1, r4, pc}
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	08002760 	.word	0x08002760
 80018e8:	08001801 	.word	0x08001801

080018ec <__sfp>:
 80018ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ee:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <__sfp+0x7c>)
 80018f0:	0007      	movs	r7, r0
 80018f2:	681e      	ldr	r6, [r3, #0]
 80018f4:	69b3      	ldr	r3, [r6, #24]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d102      	bne.n	8001900 <__sfp+0x14>
 80018fa:	0030      	movs	r0, r6
 80018fc:	f7ff ffc2 	bl	8001884 <__sinit>
 8001900:	3648      	adds	r6, #72	; 0x48
 8001902:	68b4      	ldr	r4, [r6, #8]
 8001904:	6873      	ldr	r3, [r6, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	d504      	bpl.n	8001914 <__sfp+0x28>
 800190a:	6833      	ldr	r3, [r6, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d007      	beq.n	8001920 <__sfp+0x34>
 8001910:	6836      	ldr	r6, [r6, #0]
 8001912:	e7f6      	b.n	8001902 <__sfp+0x16>
 8001914:	220c      	movs	r2, #12
 8001916:	5ea5      	ldrsh	r5, [r4, r2]
 8001918:	2d00      	cmp	r5, #0
 800191a:	d00d      	beq.n	8001938 <__sfp+0x4c>
 800191c:	3468      	adds	r4, #104	; 0x68
 800191e:	e7f2      	b.n	8001906 <__sfp+0x1a>
 8001920:	2104      	movs	r1, #4
 8001922:	0038      	movs	r0, r7
 8001924:	f7ff ff98 	bl	8001858 <__sfmoreglue>
 8001928:	6030      	str	r0, [r6, #0]
 800192a:	2800      	cmp	r0, #0
 800192c:	d1f0      	bne.n	8001910 <__sfp+0x24>
 800192e:	230c      	movs	r3, #12
 8001930:	0004      	movs	r4, r0
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	0020      	movs	r0, r4
 8001936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001938:	2301      	movs	r3, #1
 800193a:	0020      	movs	r0, r4
 800193c:	425b      	negs	r3, r3
 800193e:	81e3      	strh	r3, [r4, #14]
 8001940:	3302      	adds	r3, #2
 8001942:	81a3      	strh	r3, [r4, #12]
 8001944:	6665      	str	r5, [r4, #100]	; 0x64
 8001946:	6025      	str	r5, [r4, #0]
 8001948:	60a5      	str	r5, [r4, #8]
 800194a:	6065      	str	r5, [r4, #4]
 800194c:	6125      	str	r5, [r4, #16]
 800194e:	6165      	str	r5, [r4, #20]
 8001950:	61a5      	str	r5, [r4, #24]
 8001952:	2208      	movs	r2, #8
 8001954:	0029      	movs	r1, r5
 8001956:	305c      	adds	r0, #92	; 0x5c
 8001958:	f7ff ff30 	bl	80017bc <memset>
 800195c:	6365      	str	r5, [r4, #52]	; 0x34
 800195e:	63a5      	str	r5, [r4, #56]	; 0x38
 8001960:	64a5      	str	r5, [r4, #72]	; 0x48
 8001962:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001964:	e7e6      	b.n	8001934 <__sfp+0x48>
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	08002760 	.word	0x08002760

0800196c <_fwalk_reent>:
 800196c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800196e:	0004      	movs	r4, r0
 8001970:	0007      	movs	r7, r0
 8001972:	2600      	movs	r6, #0
 8001974:	9101      	str	r1, [sp, #4]
 8001976:	3448      	adds	r4, #72	; 0x48
 8001978:	2c00      	cmp	r4, #0
 800197a:	d101      	bne.n	8001980 <_fwalk_reent+0x14>
 800197c:	0030      	movs	r0, r6
 800197e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001980:	6863      	ldr	r3, [r4, #4]
 8001982:	68a5      	ldr	r5, [r4, #8]
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	9b00      	ldr	r3, [sp, #0]
 8001988:	3b01      	subs	r3, #1
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	d501      	bpl.n	8001992 <_fwalk_reent+0x26>
 800198e:	6824      	ldr	r4, [r4, #0]
 8001990:	e7f2      	b.n	8001978 <_fwalk_reent+0xc>
 8001992:	89ab      	ldrh	r3, [r5, #12]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d908      	bls.n	80019aa <_fwalk_reent+0x3e>
 8001998:	220e      	movs	r2, #14
 800199a:	5eab      	ldrsh	r3, [r5, r2]
 800199c:	3301      	adds	r3, #1
 800199e:	d004      	beq.n	80019aa <_fwalk_reent+0x3e>
 80019a0:	0029      	movs	r1, r5
 80019a2:	0038      	movs	r0, r7
 80019a4:	9b01      	ldr	r3, [sp, #4]
 80019a6:	4798      	blx	r3
 80019a8:	4306      	orrs	r6, r0
 80019aa:	3568      	adds	r5, #104	; 0x68
 80019ac:	e7eb      	b.n	8001986 <_fwalk_reent+0x1a>
	...

080019b0 <_malloc_r>:
 80019b0:	2303      	movs	r3, #3
 80019b2:	b570      	push	{r4, r5, r6, lr}
 80019b4:	1ccd      	adds	r5, r1, #3
 80019b6:	439d      	bics	r5, r3
 80019b8:	3508      	adds	r5, #8
 80019ba:	0006      	movs	r6, r0
 80019bc:	2d0c      	cmp	r5, #12
 80019be:	d21e      	bcs.n	80019fe <_malloc_r+0x4e>
 80019c0:	250c      	movs	r5, #12
 80019c2:	42a9      	cmp	r1, r5
 80019c4:	d81d      	bhi.n	8001a02 <_malloc_r+0x52>
 80019c6:	0030      	movs	r0, r6
 80019c8:	f000 fdad 	bl	8002526 <__malloc_lock>
 80019cc:	4a25      	ldr	r2, [pc, #148]	; (8001a64 <_malloc_r+0xb4>)
 80019ce:	6814      	ldr	r4, [r2, #0]
 80019d0:	0021      	movs	r1, r4
 80019d2:	2900      	cmp	r1, #0
 80019d4:	d119      	bne.n	8001a0a <_malloc_r+0x5a>
 80019d6:	4c24      	ldr	r4, [pc, #144]	; (8001a68 <_malloc_r+0xb8>)
 80019d8:	6823      	ldr	r3, [r4, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d103      	bne.n	80019e6 <_malloc_r+0x36>
 80019de:	0030      	movs	r0, r6
 80019e0:	f000 fb10 	bl	8002004 <_sbrk_r>
 80019e4:	6020      	str	r0, [r4, #0]
 80019e6:	0029      	movs	r1, r5
 80019e8:	0030      	movs	r0, r6
 80019ea:	f000 fb0b 	bl	8002004 <_sbrk_r>
 80019ee:	1c43      	adds	r3, r0, #1
 80019f0:	d12c      	bne.n	8001a4c <_malloc_r+0x9c>
 80019f2:	230c      	movs	r3, #12
 80019f4:	0030      	movs	r0, r6
 80019f6:	6033      	str	r3, [r6, #0]
 80019f8:	f000 fd96 	bl	8002528 <__malloc_unlock>
 80019fc:	e003      	b.n	8001a06 <_malloc_r+0x56>
 80019fe:	2d00      	cmp	r5, #0
 8001a00:	dadf      	bge.n	80019c2 <_malloc_r+0x12>
 8001a02:	230c      	movs	r3, #12
 8001a04:	6033      	str	r3, [r6, #0]
 8001a06:	2000      	movs	r0, #0
 8001a08:	bd70      	pop	{r4, r5, r6, pc}
 8001a0a:	680b      	ldr	r3, [r1, #0]
 8001a0c:	1b5b      	subs	r3, r3, r5
 8001a0e:	d41a      	bmi.n	8001a46 <_malloc_r+0x96>
 8001a10:	2b0b      	cmp	r3, #11
 8001a12:	d903      	bls.n	8001a1c <_malloc_r+0x6c>
 8001a14:	600b      	str	r3, [r1, #0]
 8001a16:	18cc      	adds	r4, r1, r3
 8001a18:	6025      	str	r5, [r4, #0]
 8001a1a:	e003      	b.n	8001a24 <_malloc_r+0x74>
 8001a1c:	428c      	cmp	r4, r1
 8001a1e:	d10e      	bne.n	8001a3e <_malloc_r+0x8e>
 8001a20:	6863      	ldr	r3, [r4, #4]
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	0030      	movs	r0, r6
 8001a26:	f000 fd7f 	bl	8002528 <__malloc_unlock>
 8001a2a:	0020      	movs	r0, r4
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	300b      	adds	r0, #11
 8001a30:	1d23      	adds	r3, r4, #4
 8001a32:	4390      	bics	r0, r2
 8001a34:	1ac3      	subs	r3, r0, r3
 8001a36:	d0e7      	beq.n	8001a08 <_malloc_r+0x58>
 8001a38:	425a      	negs	r2, r3
 8001a3a:	50e2      	str	r2, [r4, r3]
 8001a3c:	e7e4      	b.n	8001a08 <_malloc_r+0x58>
 8001a3e:	684b      	ldr	r3, [r1, #4]
 8001a40:	6063      	str	r3, [r4, #4]
 8001a42:	000c      	movs	r4, r1
 8001a44:	e7ee      	b.n	8001a24 <_malloc_r+0x74>
 8001a46:	000c      	movs	r4, r1
 8001a48:	6849      	ldr	r1, [r1, #4]
 8001a4a:	e7c2      	b.n	80019d2 <_malloc_r+0x22>
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	1cc4      	adds	r4, r0, #3
 8001a50:	439c      	bics	r4, r3
 8001a52:	42a0      	cmp	r0, r4
 8001a54:	d0e0      	beq.n	8001a18 <_malloc_r+0x68>
 8001a56:	1a21      	subs	r1, r4, r0
 8001a58:	0030      	movs	r0, r6
 8001a5a:	f000 fad3 	bl	8002004 <_sbrk_r>
 8001a5e:	1c43      	adds	r3, r0, #1
 8001a60:	d1da      	bne.n	8001a18 <_malloc_r+0x68>
 8001a62:	e7c6      	b.n	80019f2 <_malloc_r+0x42>
 8001a64:	20000084 	.word	0x20000084
 8001a68:	20000088 	.word	0x20000088

08001a6c <__sfputc_r>:
 8001a6c:	6893      	ldr	r3, [r2, #8]
 8001a6e:	b510      	push	{r4, lr}
 8001a70:	3b01      	subs	r3, #1
 8001a72:	6093      	str	r3, [r2, #8]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	da05      	bge.n	8001a84 <__sfputc_r+0x18>
 8001a78:	6994      	ldr	r4, [r2, #24]
 8001a7a:	42a3      	cmp	r3, r4
 8001a7c:	db08      	blt.n	8001a90 <__sfputc_r+0x24>
 8001a7e:	b2cb      	uxtb	r3, r1
 8001a80:	2b0a      	cmp	r3, #10
 8001a82:	d005      	beq.n	8001a90 <__sfputc_r+0x24>
 8001a84:	6813      	ldr	r3, [r2, #0]
 8001a86:	1c58      	adds	r0, r3, #1
 8001a88:	6010      	str	r0, [r2, #0]
 8001a8a:	7019      	strb	r1, [r3, #0]
 8001a8c:	b2c8      	uxtb	r0, r1
 8001a8e:	bd10      	pop	{r4, pc}
 8001a90:	f000 fb16 	bl	80020c0 <__swbuf_r>
 8001a94:	e7fb      	b.n	8001a8e <__sfputc_r+0x22>

08001a96 <__sfputs_r>:
 8001a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a98:	0006      	movs	r6, r0
 8001a9a:	000f      	movs	r7, r1
 8001a9c:	0014      	movs	r4, r2
 8001a9e:	18d5      	adds	r5, r2, r3
 8001aa0:	42ac      	cmp	r4, r5
 8001aa2:	d101      	bne.n	8001aa8 <__sfputs_r+0x12>
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	e007      	b.n	8001ab8 <__sfputs_r+0x22>
 8001aa8:	7821      	ldrb	r1, [r4, #0]
 8001aaa:	003a      	movs	r2, r7
 8001aac:	0030      	movs	r0, r6
 8001aae:	f7ff ffdd 	bl	8001a6c <__sfputc_r>
 8001ab2:	3401      	adds	r4, #1
 8001ab4:	1c43      	adds	r3, r0, #1
 8001ab6:	d1f3      	bne.n	8001aa0 <__sfputs_r+0xa>
 8001ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001abc <_vfiprintf_r>:
 8001abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001abe:	b09f      	sub	sp, #124	; 0x7c
 8001ac0:	0006      	movs	r6, r0
 8001ac2:	000f      	movs	r7, r1
 8001ac4:	0014      	movs	r4, r2
 8001ac6:	9305      	str	r3, [sp, #20]
 8001ac8:	2800      	cmp	r0, #0
 8001aca:	d004      	beq.n	8001ad6 <_vfiprintf_r+0x1a>
 8001acc:	6983      	ldr	r3, [r0, #24]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <_vfiprintf_r+0x1a>
 8001ad2:	f7ff fed7 	bl	8001884 <__sinit>
 8001ad6:	4b7f      	ldr	r3, [pc, #508]	; (8001cd4 <_vfiprintf_r+0x218>)
 8001ad8:	429f      	cmp	r7, r3
 8001ada:	d15c      	bne.n	8001b96 <_vfiprintf_r+0xda>
 8001adc:	6877      	ldr	r7, [r6, #4]
 8001ade:	89bb      	ldrh	r3, [r7, #12]
 8001ae0:	071b      	lsls	r3, r3, #28
 8001ae2:	d562      	bpl.n	8001baa <_vfiprintf_r+0xee>
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d05f      	beq.n	8001baa <_vfiprintf_r+0xee>
 8001aea:	2300      	movs	r3, #0
 8001aec:	ad06      	add	r5, sp, #24
 8001aee:	616b      	str	r3, [r5, #20]
 8001af0:	3320      	adds	r3, #32
 8001af2:	766b      	strb	r3, [r5, #25]
 8001af4:	3310      	adds	r3, #16
 8001af6:	76ab      	strb	r3, [r5, #26]
 8001af8:	9402      	str	r4, [sp, #8]
 8001afa:	9c02      	ldr	r4, [sp, #8]
 8001afc:	7823      	ldrb	r3, [r4, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d15d      	bne.n	8001bbe <_vfiprintf_r+0x102>
 8001b02:	9b02      	ldr	r3, [sp, #8]
 8001b04:	1ae3      	subs	r3, r4, r3
 8001b06:	9304      	str	r3, [sp, #16]
 8001b08:	d00d      	beq.n	8001b26 <_vfiprintf_r+0x6a>
 8001b0a:	9b04      	ldr	r3, [sp, #16]
 8001b0c:	9a02      	ldr	r2, [sp, #8]
 8001b0e:	0039      	movs	r1, r7
 8001b10:	0030      	movs	r0, r6
 8001b12:	f7ff ffc0 	bl	8001a96 <__sfputs_r>
 8001b16:	1c43      	adds	r3, r0, #1
 8001b18:	d100      	bne.n	8001b1c <_vfiprintf_r+0x60>
 8001b1a:	e0cc      	b.n	8001cb6 <_vfiprintf_r+0x1fa>
 8001b1c:	696a      	ldr	r2, [r5, #20]
 8001b1e:	9b04      	ldr	r3, [sp, #16]
 8001b20:	4694      	mov	ip, r2
 8001b22:	4463      	add	r3, ip
 8001b24:	616b      	str	r3, [r5, #20]
 8001b26:	7823      	ldrb	r3, [r4, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d100      	bne.n	8001b2e <_vfiprintf_r+0x72>
 8001b2c:	e0c3      	b.n	8001cb6 <_vfiprintf_r+0x1fa>
 8001b2e:	2201      	movs	r2, #1
 8001b30:	2300      	movs	r3, #0
 8001b32:	4252      	negs	r2, r2
 8001b34:	606a      	str	r2, [r5, #4]
 8001b36:	a902      	add	r1, sp, #8
 8001b38:	3254      	adds	r2, #84	; 0x54
 8001b3a:	1852      	adds	r2, r2, r1
 8001b3c:	3401      	adds	r4, #1
 8001b3e:	602b      	str	r3, [r5, #0]
 8001b40:	60eb      	str	r3, [r5, #12]
 8001b42:	60ab      	str	r3, [r5, #8]
 8001b44:	7013      	strb	r3, [r2, #0]
 8001b46:	65ab      	str	r3, [r5, #88]	; 0x58
 8001b48:	7821      	ldrb	r1, [r4, #0]
 8001b4a:	2205      	movs	r2, #5
 8001b4c:	4862      	ldr	r0, [pc, #392]	; (8001cd8 <_vfiprintf_r+0x21c>)
 8001b4e:	f000 fcdf 	bl	8002510 <memchr>
 8001b52:	1c63      	adds	r3, r4, #1
 8001b54:	469c      	mov	ip, r3
 8001b56:	2800      	cmp	r0, #0
 8001b58:	d135      	bne.n	8001bc6 <_vfiprintf_r+0x10a>
 8001b5a:	6829      	ldr	r1, [r5, #0]
 8001b5c:	06cb      	lsls	r3, r1, #27
 8001b5e:	d504      	bpl.n	8001b6a <_vfiprintf_r+0xae>
 8001b60:	2353      	movs	r3, #83	; 0x53
 8001b62:	aa02      	add	r2, sp, #8
 8001b64:	3020      	adds	r0, #32
 8001b66:	189b      	adds	r3, r3, r2
 8001b68:	7018      	strb	r0, [r3, #0]
 8001b6a:	070b      	lsls	r3, r1, #28
 8001b6c:	d504      	bpl.n	8001b78 <_vfiprintf_r+0xbc>
 8001b6e:	2353      	movs	r3, #83	; 0x53
 8001b70:	202b      	movs	r0, #43	; 0x2b
 8001b72:	aa02      	add	r2, sp, #8
 8001b74:	189b      	adds	r3, r3, r2
 8001b76:	7018      	strb	r0, [r3, #0]
 8001b78:	7823      	ldrb	r3, [r4, #0]
 8001b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8001b7c:	d02c      	beq.n	8001bd8 <_vfiprintf_r+0x11c>
 8001b7e:	2000      	movs	r0, #0
 8001b80:	210a      	movs	r1, #10
 8001b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b84:	7822      	ldrb	r2, [r4, #0]
 8001b86:	3a30      	subs	r2, #48	; 0x30
 8001b88:	2a09      	cmp	r2, #9
 8001b8a:	d800      	bhi.n	8001b8e <_vfiprintf_r+0xd2>
 8001b8c:	e06b      	b.n	8001c66 <_vfiprintf_r+0x1aa>
 8001b8e:	2800      	cmp	r0, #0
 8001b90:	d02a      	beq.n	8001be8 <_vfiprintf_r+0x12c>
 8001b92:	9309      	str	r3, [sp, #36]	; 0x24
 8001b94:	e028      	b.n	8001be8 <_vfiprintf_r+0x12c>
 8001b96:	4b51      	ldr	r3, [pc, #324]	; (8001cdc <_vfiprintf_r+0x220>)
 8001b98:	429f      	cmp	r7, r3
 8001b9a:	d101      	bne.n	8001ba0 <_vfiprintf_r+0xe4>
 8001b9c:	68b7      	ldr	r7, [r6, #8]
 8001b9e:	e79e      	b.n	8001ade <_vfiprintf_r+0x22>
 8001ba0:	4b4f      	ldr	r3, [pc, #316]	; (8001ce0 <_vfiprintf_r+0x224>)
 8001ba2:	429f      	cmp	r7, r3
 8001ba4:	d19b      	bne.n	8001ade <_vfiprintf_r+0x22>
 8001ba6:	68f7      	ldr	r7, [r6, #12]
 8001ba8:	e799      	b.n	8001ade <_vfiprintf_r+0x22>
 8001baa:	0039      	movs	r1, r7
 8001bac:	0030      	movs	r0, r6
 8001bae:	f000 faf1 	bl	8002194 <__swsetup_r>
 8001bb2:	2800      	cmp	r0, #0
 8001bb4:	d099      	beq.n	8001aea <_vfiprintf_r+0x2e>
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	4240      	negs	r0, r0
 8001bba:	b01f      	add	sp, #124	; 0x7c
 8001bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bbe:	2b25      	cmp	r3, #37	; 0x25
 8001bc0:	d09f      	beq.n	8001b02 <_vfiprintf_r+0x46>
 8001bc2:	3401      	adds	r4, #1
 8001bc4:	e79a      	b.n	8001afc <_vfiprintf_r+0x40>
 8001bc6:	4b44      	ldr	r3, [pc, #272]	; (8001cd8 <_vfiprintf_r+0x21c>)
 8001bc8:	6829      	ldr	r1, [r5, #0]
 8001bca:	1ac0      	subs	r0, r0, r3
 8001bcc:	2301      	movs	r3, #1
 8001bce:	4083      	lsls	r3, r0
 8001bd0:	430b      	orrs	r3, r1
 8001bd2:	602b      	str	r3, [r5, #0]
 8001bd4:	4664      	mov	r4, ip
 8001bd6:	e7b7      	b.n	8001b48 <_vfiprintf_r+0x8c>
 8001bd8:	9b05      	ldr	r3, [sp, #20]
 8001bda:	1d18      	adds	r0, r3, #4
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	9005      	str	r0, [sp, #20]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db3a      	blt.n	8001c5a <_vfiprintf_r+0x19e>
 8001be4:	9309      	str	r3, [sp, #36]	; 0x24
 8001be6:	4664      	mov	r4, ip
 8001be8:	7823      	ldrb	r3, [r4, #0]
 8001bea:	2b2e      	cmp	r3, #46	; 0x2e
 8001bec:	d10b      	bne.n	8001c06 <_vfiprintf_r+0x14a>
 8001bee:	7863      	ldrb	r3, [r4, #1]
 8001bf0:	1c62      	adds	r2, r4, #1
 8001bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8001bf4:	d13f      	bne.n	8001c76 <_vfiprintf_r+0x1ba>
 8001bf6:	9b05      	ldr	r3, [sp, #20]
 8001bf8:	3402      	adds	r4, #2
 8001bfa:	1d1a      	adds	r2, r3, #4
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	9205      	str	r2, [sp, #20]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	db35      	blt.n	8001c70 <_vfiprintf_r+0x1b4>
 8001c04:	9307      	str	r3, [sp, #28]
 8001c06:	7821      	ldrb	r1, [r4, #0]
 8001c08:	2203      	movs	r2, #3
 8001c0a:	4836      	ldr	r0, [pc, #216]	; (8001ce4 <_vfiprintf_r+0x228>)
 8001c0c:	f000 fc80 	bl	8002510 <memchr>
 8001c10:	2800      	cmp	r0, #0
 8001c12:	d007      	beq.n	8001c24 <_vfiprintf_r+0x168>
 8001c14:	4b33      	ldr	r3, [pc, #204]	; (8001ce4 <_vfiprintf_r+0x228>)
 8001c16:	682a      	ldr	r2, [r5, #0]
 8001c18:	1ac0      	subs	r0, r0, r3
 8001c1a:	2340      	movs	r3, #64	; 0x40
 8001c1c:	4083      	lsls	r3, r0
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	602b      	str	r3, [r5, #0]
 8001c22:	3401      	adds	r4, #1
 8001c24:	7821      	ldrb	r1, [r4, #0]
 8001c26:	1c63      	adds	r3, r4, #1
 8001c28:	2206      	movs	r2, #6
 8001c2a:	482f      	ldr	r0, [pc, #188]	; (8001ce8 <_vfiprintf_r+0x22c>)
 8001c2c:	9302      	str	r3, [sp, #8]
 8001c2e:	7629      	strb	r1, [r5, #24]
 8001c30:	f000 fc6e 	bl	8002510 <memchr>
 8001c34:	2800      	cmp	r0, #0
 8001c36:	d044      	beq.n	8001cc2 <_vfiprintf_r+0x206>
 8001c38:	4b2c      	ldr	r3, [pc, #176]	; (8001cec <_vfiprintf_r+0x230>)
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d12f      	bne.n	8001c9e <_vfiprintf_r+0x1e2>
 8001c3e:	6829      	ldr	r1, [r5, #0]
 8001c40:	9b05      	ldr	r3, [sp, #20]
 8001c42:	2207      	movs	r2, #7
 8001c44:	05c9      	lsls	r1, r1, #23
 8001c46:	d528      	bpl.n	8001c9a <_vfiprintf_r+0x1de>
 8001c48:	189b      	adds	r3, r3, r2
 8001c4a:	4393      	bics	r3, r2
 8001c4c:	3308      	adds	r3, #8
 8001c4e:	9305      	str	r3, [sp, #20]
 8001c50:	696b      	ldr	r3, [r5, #20]
 8001c52:	9a03      	ldr	r2, [sp, #12]
 8001c54:	189b      	adds	r3, r3, r2
 8001c56:	616b      	str	r3, [r5, #20]
 8001c58:	e74f      	b.n	8001afa <_vfiprintf_r+0x3e>
 8001c5a:	425b      	negs	r3, r3
 8001c5c:	60eb      	str	r3, [r5, #12]
 8001c5e:	2302      	movs	r3, #2
 8001c60:	430b      	orrs	r3, r1
 8001c62:	602b      	str	r3, [r5, #0]
 8001c64:	e7bf      	b.n	8001be6 <_vfiprintf_r+0x12a>
 8001c66:	434b      	muls	r3, r1
 8001c68:	3401      	adds	r4, #1
 8001c6a:	189b      	adds	r3, r3, r2
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	e789      	b.n	8001b84 <_vfiprintf_r+0xc8>
 8001c70:	2301      	movs	r3, #1
 8001c72:	425b      	negs	r3, r3
 8001c74:	e7c6      	b.n	8001c04 <_vfiprintf_r+0x148>
 8001c76:	2300      	movs	r3, #0
 8001c78:	0014      	movs	r4, r2
 8001c7a:	200a      	movs	r0, #10
 8001c7c:	001a      	movs	r2, r3
 8001c7e:	606b      	str	r3, [r5, #4]
 8001c80:	7821      	ldrb	r1, [r4, #0]
 8001c82:	3930      	subs	r1, #48	; 0x30
 8001c84:	2909      	cmp	r1, #9
 8001c86:	d903      	bls.n	8001c90 <_vfiprintf_r+0x1d4>
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0bc      	beq.n	8001c06 <_vfiprintf_r+0x14a>
 8001c8c:	9207      	str	r2, [sp, #28]
 8001c8e:	e7ba      	b.n	8001c06 <_vfiprintf_r+0x14a>
 8001c90:	4342      	muls	r2, r0
 8001c92:	3401      	adds	r4, #1
 8001c94:	1852      	adds	r2, r2, r1
 8001c96:	2301      	movs	r3, #1
 8001c98:	e7f2      	b.n	8001c80 <_vfiprintf_r+0x1c4>
 8001c9a:	3307      	adds	r3, #7
 8001c9c:	e7d5      	b.n	8001c4a <_vfiprintf_r+0x18e>
 8001c9e:	ab05      	add	r3, sp, #20
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	003a      	movs	r2, r7
 8001ca4:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <_vfiprintf_r+0x234>)
 8001ca6:	0029      	movs	r1, r5
 8001ca8:	0030      	movs	r0, r6
 8001caa:	e000      	b.n	8001cae <_vfiprintf_r+0x1f2>
 8001cac:	bf00      	nop
 8001cae:	9003      	str	r0, [sp, #12]
 8001cb0:	9b03      	ldr	r3, [sp, #12]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	d1cc      	bne.n	8001c50 <_vfiprintf_r+0x194>
 8001cb6:	89bb      	ldrh	r3, [r7, #12]
 8001cb8:	065b      	lsls	r3, r3, #25
 8001cba:	d500      	bpl.n	8001cbe <_vfiprintf_r+0x202>
 8001cbc:	e77b      	b.n	8001bb6 <_vfiprintf_r+0xfa>
 8001cbe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001cc0:	e77b      	b.n	8001bba <_vfiprintf_r+0xfe>
 8001cc2:	ab05      	add	r3, sp, #20
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	003a      	movs	r2, r7
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <_vfiprintf_r+0x234>)
 8001cca:	0029      	movs	r1, r5
 8001ccc:	0030      	movs	r0, r6
 8001cce:	f000 f87f 	bl	8001dd0 <_printf_i>
 8001cd2:	e7ec      	b.n	8001cae <_vfiprintf_r+0x1f2>
 8001cd4:	08002720 	.word	0x08002720
 8001cd8:	08002764 	.word	0x08002764
 8001cdc:	08002740 	.word	0x08002740
 8001ce0:	08002700 	.word	0x08002700
 8001ce4:	0800276a 	.word	0x0800276a
 8001ce8:	0800276e 	.word	0x0800276e
 8001cec:	00000000 	.word	0x00000000
 8001cf0:	08001a97 	.word	0x08001a97

08001cf4 <_printf_common>:
 8001cf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001cf6:	0015      	movs	r5, r2
 8001cf8:	9301      	str	r3, [sp, #4]
 8001cfa:	688a      	ldr	r2, [r1, #8]
 8001cfc:	690b      	ldr	r3, [r1, #16]
 8001cfe:	9000      	str	r0, [sp, #0]
 8001d00:	000c      	movs	r4, r1
 8001d02:	4293      	cmp	r3, r2
 8001d04:	da00      	bge.n	8001d08 <_printf_common+0x14>
 8001d06:	0013      	movs	r3, r2
 8001d08:	0022      	movs	r2, r4
 8001d0a:	602b      	str	r3, [r5, #0]
 8001d0c:	3243      	adds	r2, #67	; 0x43
 8001d0e:	7812      	ldrb	r2, [r2, #0]
 8001d10:	2a00      	cmp	r2, #0
 8001d12:	d001      	beq.n	8001d18 <_printf_common+0x24>
 8001d14:	3301      	adds	r3, #1
 8001d16:	602b      	str	r3, [r5, #0]
 8001d18:	6823      	ldr	r3, [r4, #0]
 8001d1a:	069b      	lsls	r3, r3, #26
 8001d1c:	d502      	bpl.n	8001d24 <_printf_common+0x30>
 8001d1e:	682b      	ldr	r3, [r5, #0]
 8001d20:	3302      	adds	r3, #2
 8001d22:	602b      	str	r3, [r5, #0]
 8001d24:	2706      	movs	r7, #6
 8001d26:	6823      	ldr	r3, [r4, #0]
 8001d28:	401f      	ands	r7, r3
 8001d2a:	d027      	beq.n	8001d7c <_printf_common+0x88>
 8001d2c:	0023      	movs	r3, r4
 8001d2e:	3343      	adds	r3, #67	; 0x43
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	1e5a      	subs	r2, r3, #1
 8001d34:	4193      	sbcs	r3, r2
 8001d36:	6822      	ldr	r2, [r4, #0]
 8001d38:	0692      	lsls	r2, r2, #26
 8001d3a:	d430      	bmi.n	8001d9e <_printf_common+0xaa>
 8001d3c:	0022      	movs	r2, r4
 8001d3e:	9901      	ldr	r1, [sp, #4]
 8001d40:	3243      	adds	r2, #67	; 0x43
 8001d42:	9800      	ldr	r0, [sp, #0]
 8001d44:	9e08      	ldr	r6, [sp, #32]
 8001d46:	47b0      	blx	r6
 8001d48:	1c43      	adds	r3, r0, #1
 8001d4a:	d025      	beq.n	8001d98 <_printf_common+0xa4>
 8001d4c:	2306      	movs	r3, #6
 8001d4e:	6820      	ldr	r0, [r4, #0]
 8001d50:	682a      	ldr	r2, [r5, #0]
 8001d52:	68e1      	ldr	r1, [r4, #12]
 8001d54:	4003      	ands	r3, r0
 8001d56:	2500      	movs	r5, #0
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d103      	bne.n	8001d64 <_printf_common+0x70>
 8001d5c:	1a8d      	subs	r5, r1, r2
 8001d5e:	43eb      	mvns	r3, r5
 8001d60:	17db      	asrs	r3, r3, #31
 8001d62:	401d      	ands	r5, r3
 8001d64:	68a3      	ldr	r3, [r4, #8]
 8001d66:	6922      	ldr	r2, [r4, #16]
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	dd01      	ble.n	8001d70 <_printf_common+0x7c>
 8001d6c:	1a9b      	subs	r3, r3, r2
 8001d6e:	18ed      	adds	r5, r5, r3
 8001d70:	2700      	movs	r7, #0
 8001d72:	42bd      	cmp	r5, r7
 8001d74:	d120      	bne.n	8001db8 <_printf_common+0xc4>
 8001d76:	2000      	movs	r0, #0
 8001d78:	e010      	b.n	8001d9c <_printf_common+0xa8>
 8001d7a:	3701      	adds	r7, #1
 8001d7c:	68e3      	ldr	r3, [r4, #12]
 8001d7e:	682a      	ldr	r2, [r5, #0]
 8001d80:	1a9b      	subs	r3, r3, r2
 8001d82:	429f      	cmp	r7, r3
 8001d84:	dad2      	bge.n	8001d2c <_printf_common+0x38>
 8001d86:	0022      	movs	r2, r4
 8001d88:	2301      	movs	r3, #1
 8001d8a:	3219      	adds	r2, #25
 8001d8c:	9901      	ldr	r1, [sp, #4]
 8001d8e:	9800      	ldr	r0, [sp, #0]
 8001d90:	9e08      	ldr	r6, [sp, #32]
 8001d92:	47b0      	blx	r6
 8001d94:	1c43      	adds	r3, r0, #1
 8001d96:	d1f0      	bne.n	8001d7a <_printf_common+0x86>
 8001d98:	2001      	movs	r0, #1
 8001d9a:	4240      	negs	r0, r0
 8001d9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001d9e:	2030      	movs	r0, #48	; 0x30
 8001da0:	18e1      	adds	r1, r4, r3
 8001da2:	3143      	adds	r1, #67	; 0x43
 8001da4:	7008      	strb	r0, [r1, #0]
 8001da6:	0021      	movs	r1, r4
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	3145      	adds	r1, #69	; 0x45
 8001dac:	7809      	ldrb	r1, [r1, #0]
 8001dae:	18a2      	adds	r2, r4, r2
 8001db0:	3243      	adds	r2, #67	; 0x43
 8001db2:	3302      	adds	r3, #2
 8001db4:	7011      	strb	r1, [r2, #0]
 8001db6:	e7c1      	b.n	8001d3c <_printf_common+0x48>
 8001db8:	0022      	movs	r2, r4
 8001dba:	2301      	movs	r3, #1
 8001dbc:	321a      	adds	r2, #26
 8001dbe:	9901      	ldr	r1, [sp, #4]
 8001dc0:	9800      	ldr	r0, [sp, #0]
 8001dc2:	9e08      	ldr	r6, [sp, #32]
 8001dc4:	47b0      	blx	r6
 8001dc6:	1c43      	adds	r3, r0, #1
 8001dc8:	d0e6      	beq.n	8001d98 <_printf_common+0xa4>
 8001dca:	3701      	adds	r7, #1
 8001dcc:	e7d1      	b.n	8001d72 <_printf_common+0x7e>
	...

08001dd0 <_printf_i>:
 8001dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dd2:	b08b      	sub	sp, #44	; 0x2c
 8001dd4:	9206      	str	r2, [sp, #24]
 8001dd6:	000a      	movs	r2, r1
 8001dd8:	3243      	adds	r2, #67	; 0x43
 8001dda:	9307      	str	r3, [sp, #28]
 8001ddc:	9005      	str	r0, [sp, #20]
 8001dde:	9204      	str	r2, [sp, #16]
 8001de0:	7e0a      	ldrb	r2, [r1, #24]
 8001de2:	000c      	movs	r4, r1
 8001de4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001de6:	2a6e      	cmp	r2, #110	; 0x6e
 8001de8:	d100      	bne.n	8001dec <_printf_i+0x1c>
 8001dea:	e08f      	b.n	8001f0c <_printf_i+0x13c>
 8001dec:	d817      	bhi.n	8001e1e <_printf_i+0x4e>
 8001dee:	2a63      	cmp	r2, #99	; 0x63
 8001df0:	d02c      	beq.n	8001e4c <_printf_i+0x7c>
 8001df2:	d808      	bhi.n	8001e06 <_printf_i+0x36>
 8001df4:	2a00      	cmp	r2, #0
 8001df6:	d100      	bne.n	8001dfa <_printf_i+0x2a>
 8001df8:	e099      	b.n	8001f2e <_printf_i+0x15e>
 8001dfa:	2a58      	cmp	r2, #88	; 0x58
 8001dfc:	d054      	beq.n	8001ea8 <_printf_i+0xd8>
 8001dfe:	0026      	movs	r6, r4
 8001e00:	3642      	adds	r6, #66	; 0x42
 8001e02:	7032      	strb	r2, [r6, #0]
 8001e04:	e029      	b.n	8001e5a <_printf_i+0x8a>
 8001e06:	2a64      	cmp	r2, #100	; 0x64
 8001e08:	d001      	beq.n	8001e0e <_printf_i+0x3e>
 8001e0a:	2a69      	cmp	r2, #105	; 0x69
 8001e0c:	d1f7      	bne.n	8001dfe <_printf_i+0x2e>
 8001e0e:	6821      	ldr	r1, [r4, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	0608      	lsls	r0, r1, #24
 8001e14:	d523      	bpl.n	8001e5e <_printf_i+0x8e>
 8001e16:	1d11      	adds	r1, r2, #4
 8001e18:	6019      	str	r1, [r3, #0]
 8001e1a:	6815      	ldr	r5, [r2, #0]
 8001e1c:	e025      	b.n	8001e6a <_printf_i+0x9a>
 8001e1e:	2a73      	cmp	r2, #115	; 0x73
 8001e20:	d100      	bne.n	8001e24 <_printf_i+0x54>
 8001e22:	e088      	b.n	8001f36 <_printf_i+0x166>
 8001e24:	d808      	bhi.n	8001e38 <_printf_i+0x68>
 8001e26:	2a6f      	cmp	r2, #111	; 0x6f
 8001e28:	d029      	beq.n	8001e7e <_printf_i+0xae>
 8001e2a:	2a70      	cmp	r2, #112	; 0x70
 8001e2c:	d1e7      	bne.n	8001dfe <_printf_i+0x2e>
 8001e2e:	2220      	movs	r2, #32
 8001e30:	6809      	ldr	r1, [r1, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	6022      	str	r2, [r4, #0]
 8001e36:	e003      	b.n	8001e40 <_printf_i+0x70>
 8001e38:	2a75      	cmp	r2, #117	; 0x75
 8001e3a:	d020      	beq.n	8001e7e <_printf_i+0xae>
 8001e3c:	2a78      	cmp	r2, #120	; 0x78
 8001e3e:	d1de      	bne.n	8001dfe <_printf_i+0x2e>
 8001e40:	0022      	movs	r2, r4
 8001e42:	2178      	movs	r1, #120	; 0x78
 8001e44:	3245      	adds	r2, #69	; 0x45
 8001e46:	7011      	strb	r1, [r2, #0]
 8001e48:	4a6c      	ldr	r2, [pc, #432]	; (8001ffc <_printf_i+0x22c>)
 8001e4a:	e030      	b.n	8001eae <_printf_i+0xde>
 8001e4c:	000e      	movs	r6, r1
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	3642      	adds	r6, #66	; 0x42
 8001e52:	1d11      	adds	r1, r2, #4
 8001e54:	6019      	str	r1, [r3, #0]
 8001e56:	6813      	ldr	r3, [r2, #0]
 8001e58:	7033      	strb	r3, [r6, #0]
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e079      	b.n	8001f52 <_printf_i+0x182>
 8001e5e:	0649      	lsls	r1, r1, #25
 8001e60:	d5d9      	bpl.n	8001e16 <_printf_i+0x46>
 8001e62:	1d11      	adds	r1, r2, #4
 8001e64:	6019      	str	r1, [r3, #0]
 8001e66:	2300      	movs	r3, #0
 8001e68:	5ed5      	ldrsh	r5, [r2, r3]
 8001e6a:	2d00      	cmp	r5, #0
 8001e6c:	da03      	bge.n	8001e76 <_printf_i+0xa6>
 8001e6e:	232d      	movs	r3, #45	; 0x2d
 8001e70:	9a04      	ldr	r2, [sp, #16]
 8001e72:	426d      	negs	r5, r5
 8001e74:	7013      	strb	r3, [r2, #0]
 8001e76:	4b62      	ldr	r3, [pc, #392]	; (8002000 <_printf_i+0x230>)
 8001e78:	270a      	movs	r7, #10
 8001e7a:	9303      	str	r3, [sp, #12]
 8001e7c:	e02f      	b.n	8001ede <_printf_i+0x10e>
 8001e7e:	6820      	ldr	r0, [r4, #0]
 8001e80:	6819      	ldr	r1, [r3, #0]
 8001e82:	0605      	lsls	r5, r0, #24
 8001e84:	d503      	bpl.n	8001e8e <_printf_i+0xbe>
 8001e86:	1d08      	adds	r0, r1, #4
 8001e88:	6018      	str	r0, [r3, #0]
 8001e8a:	680d      	ldr	r5, [r1, #0]
 8001e8c:	e005      	b.n	8001e9a <_printf_i+0xca>
 8001e8e:	0640      	lsls	r0, r0, #25
 8001e90:	d5f9      	bpl.n	8001e86 <_printf_i+0xb6>
 8001e92:	680d      	ldr	r5, [r1, #0]
 8001e94:	1d08      	adds	r0, r1, #4
 8001e96:	6018      	str	r0, [r3, #0]
 8001e98:	b2ad      	uxth	r5, r5
 8001e9a:	4b59      	ldr	r3, [pc, #356]	; (8002000 <_printf_i+0x230>)
 8001e9c:	2708      	movs	r7, #8
 8001e9e:	9303      	str	r3, [sp, #12]
 8001ea0:	2a6f      	cmp	r2, #111	; 0x6f
 8001ea2:	d018      	beq.n	8001ed6 <_printf_i+0x106>
 8001ea4:	270a      	movs	r7, #10
 8001ea6:	e016      	b.n	8001ed6 <_printf_i+0x106>
 8001ea8:	3145      	adds	r1, #69	; 0x45
 8001eaa:	700a      	strb	r2, [r1, #0]
 8001eac:	4a54      	ldr	r2, [pc, #336]	; (8002000 <_printf_i+0x230>)
 8001eae:	9203      	str	r2, [sp, #12]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	6821      	ldr	r1, [r4, #0]
 8001eb4:	1d10      	adds	r0, r2, #4
 8001eb6:	6018      	str	r0, [r3, #0]
 8001eb8:	6815      	ldr	r5, [r2, #0]
 8001eba:	0608      	lsls	r0, r1, #24
 8001ebc:	d522      	bpl.n	8001f04 <_printf_i+0x134>
 8001ebe:	07cb      	lsls	r3, r1, #31
 8001ec0:	d502      	bpl.n	8001ec8 <_printf_i+0xf8>
 8001ec2:	2320      	movs	r3, #32
 8001ec4:	4319      	orrs	r1, r3
 8001ec6:	6021      	str	r1, [r4, #0]
 8001ec8:	2710      	movs	r7, #16
 8001eca:	2d00      	cmp	r5, #0
 8001ecc:	d103      	bne.n	8001ed6 <_printf_i+0x106>
 8001ece:	2320      	movs	r3, #32
 8001ed0:	6822      	ldr	r2, [r4, #0]
 8001ed2:	439a      	bics	r2, r3
 8001ed4:	6022      	str	r2, [r4, #0]
 8001ed6:	0023      	movs	r3, r4
 8001ed8:	2200      	movs	r2, #0
 8001eda:	3343      	adds	r3, #67	; 0x43
 8001edc:	701a      	strb	r2, [r3, #0]
 8001ede:	6863      	ldr	r3, [r4, #4]
 8001ee0:	60a3      	str	r3, [r4, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	db5c      	blt.n	8001fa0 <_printf_i+0x1d0>
 8001ee6:	2204      	movs	r2, #4
 8001ee8:	6821      	ldr	r1, [r4, #0]
 8001eea:	4391      	bics	r1, r2
 8001eec:	6021      	str	r1, [r4, #0]
 8001eee:	2d00      	cmp	r5, #0
 8001ef0:	d158      	bne.n	8001fa4 <_printf_i+0x1d4>
 8001ef2:	9e04      	ldr	r6, [sp, #16]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d064      	beq.n	8001fc2 <_printf_i+0x1f2>
 8001ef8:	0026      	movs	r6, r4
 8001efa:	9b03      	ldr	r3, [sp, #12]
 8001efc:	3642      	adds	r6, #66	; 0x42
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	7033      	strb	r3, [r6, #0]
 8001f02:	e05e      	b.n	8001fc2 <_printf_i+0x1f2>
 8001f04:	0648      	lsls	r0, r1, #25
 8001f06:	d5da      	bpl.n	8001ebe <_printf_i+0xee>
 8001f08:	b2ad      	uxth	r5, r5
 8001f0a:	e7d8      	b.n	8001ebe <_printf_i+0xee>
 8001f0c:	6809      	ldr	r1, [r1, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	0608      	lsls	r0, r1, #24
 8001f12:	d505      	bpl.n	8001f20 <_printf_i+0x150>
 8001f14:	1d11      	adds	r1, r2, #4
 8001f16:	6019      	str	r1, [r3, #0]
 8001f18:	6813      	ldr	r3, [r2, #0]
 8001f1a:	6962      	ldr	r2, [r4, #20]
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	e006      	b.n	8001f2e <_printf_i+0x15e>
 8001f20:	0649      	lsls	r1, r1, #25
 8001f22:	d5f7      	bpl.n	8001f14 <_printf_i+0x144>
 8001f24:	1d11      	adds	r1, r2, #4
 8001f26:	6019      	str	r1, [r3, #0]
 8001f28:	6813      	ldr	r3, [r2, #0]
 8001f2a:	8aa2      	ldrh	r2, [r4, #20]
 8001f2c:	801a      	strh	r2, [r3, #0]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	9e04      	ldr	r6, [sp, #16]
 8001f32:	6123      	str	r3, [r4, #16]
 8001f34:	e054      	b.n	8001fe0 <_printf_i+0x210>
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	1d11      	adds	r1, r2, #4
 8001f3a:	6019      	str	r1, [r3, #0]
 8001f3c:	6816      	ldr	r6, [r2, #0]
 8001f3e:	2100      	movs	r1, #0
 8001f40:	6862      	ldr	r2, [r4, #4]
 8001f42:	0030      	movs	r0, r6
 8001f44:	f000 fae4 	bl	8002510 <memchr>
 8001f48:	2800      	cmp	r0, #0
 8001f4a:	d001      	beq.n	8001f50 <_printf_i+0x180>
 8001f4c:	1b80      	subs	r0, r0, r6
 8001f4e:	6060      	str	r0, [r4, #4]
 8001f50:	6863      	ldr	r3, [r4, #4]
 8001f52:	6123      	str	r3, [r4, #16]
 8001f54:	2300      	movs	r3, #0
 8001f56:	9a04      	ldr	r2, [sp, #16]
 8001f58:	7013      	strb	r3, [r2, #0]
 8001f5a:	e041      	b.n	8001fe0 <_printf_i+0x210>
 8001f5c:	6923      	ldr	r3, [r4, #16]
 8001f5e:	0032      	movs	r2, r6
 8001f60:	9906      	ldr	r1, [sp, #24]
 8001f62:	9805      	ldr	r0, [sp, #20]
 8001f64:	9d07      	ldr	r5, [sp, #28]
 8001f66:	47a8      	blx	r5
 8001f68:	1c43      	adds	r3, r0, #1
 8001f6a:	d043      	beq.n	8001ff4 <_printf_i+0x224>
 8001f6c:	6823      	ldr	r3, [r4, #0]
 8001f6e:	2500      	movs	r5, #0
 8001f70:	079b      	lsls	r3, r3, #30
 8001f72:	d40f      	bmi.n	8001f94 <_printf_i+0x1c4>
 8001f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f76:	68e0      	ldr	r0, [r4, #12]
 8001f78:	4298      	cmp	r0, r3
 8001f7a:	da3d      	bge.n	8001ff8 <_printf_i+0x228>
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	e03b      	b.n	8001ff8 <_printf_i+0x228>
 8001f80:	0022      	movs	r2, r4
 8001f82:	2301      	movs	r3, #1
 8001f84:	3219      	adds	r2, #25
 8001f86:	9906      	ldr	r1, [sp, #24]
 8001f88:	9805      	ldr	r0, [sp, #20]
 8001f8a:	9e07      	ldr	r6, [sp, #28]
 8001f8c:	47b0      	blx	r6
 8001f8e:	1c43      	adds	r3, r0, #1
 8001f90:	d030      	beq.n	8001ff4 <_printf_i+0x224>
 8001f92:	3501      	adds	r5, #1
 8001f94:	68e3      	ldr	r3, [r4, #12]
 8001f96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	429d      	cmp	r5, r3
 8001f9c:	dbf0      	blt.n	8001f80 <_printf_i+0x1b0>
 8001f9e:	e7e9      	b.n	8001f74 <_printf_i+0x1a4>
 8001fa0:	2d00      	cmp	r5, #0
 8001fa2:	d0a9      	beq.n	8001ef8 <_printf_i+0x128>
 8001fa4:	9e04      	ldr	r6, [sp, #16]
 8001fa6:	0028      	movs	r0, r5
 8001fa8:	0039      	movs	r1, r7
 8001faa:	f7fe f947 	bl	800023c <__aeabi_uidivmod>
 8001fae:	9b03      	ldr	r3, [sp, #12]
 8001fb0:	3e01      	subs	r6, #1
 8001fb2:	5c5b      	ldrb	r3, [r3, r1]
 8001fb4:	0028      	movs	r0, r5
 8001fb6:	7033      	strb	r3, [r6, #0]
 8001fb8:	0039      	movs	r1, r7
 8001fba:	f7fe f8b9 	bl	8000130 <__udivsi3>
 8001fbe:	1e05      	subs	r5, r0, #0
 8001fc0:	d1f1      	bne.n	8001fa6 <_printf_i+0x1d6>
 8001fc2:	2f08      	cmp	r7, #8
 8001fc4:	d109      	bne.n	8001fda <_printf_i+0x20a>
 8001fc6:	6823      	ldr	r3, [r4, #0]
 8001fc8:	07db      	lsls	r3, r3, #31
 8001fca:	d506      	bpl.n	8001fda <_printf_i+0x20a>
 8001fcc:	6863      	ldr	r3, [r4, #4]
 8001fce:	6922      	ldr	r2, [r4, #16]
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	dc02      	bgt.n	8001fda <_printf_i+0x20a>
 8001fd4:	2330      	movs	r3, #48	; 0x30
 8001fd6:	3e01      	subs	r6, #1
 8001fd8:	7033      	strb	r3, [r6, #0]
 8001fda:	9b04      	ldr	r3, [sp, #16]
 8001fdc:	1b9b      	subs	r3, r3, r6
 8001fde:	6123      	str	r3, [r4, #16]
 8001fe0:	9b07      	ldr	r3, [sp, #28]
 8001fe2:	aa09      	add	r2, sp, #36	; 0x24
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	0021      	movs	r1, r4
 8001fe8:	9b06      	ldr	r3, [sp, #24]
 8001fea:	9805      	ldr	r0, [sp, #20]
 8001fec:	f7ff fe82 	bl	8001cf4 <_printf_common>
 8001ff0:	1c43      	adds	r3, r0, #1
 8001ff2:	d1b3      	bne.n	8001f5c <_printf_i+0x18c>
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	4240      	negs	r0, r0
 8001ff8:	b00b      	add	sp, #44	; 0x2c
 8001ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ffc:	08002786 	.word	0x08002786
 8002000:	08002775 	.word	0x08002775

08002004 <_sbrk_r>:
 8002004:	2300      	movs	r3, #0
 8002006:	b570      	push	{r4, r5, r6, lr}
 8002008:	4c06      	ldr	r4, [pc, #24]	; (8002024 <_sbrk_r+0x20>)
 800200a:	0005      	movs	r5, r0
 800200c:	0008      	movs	r0, r1
 800200e:	6023      	str	r3, [r4, #0]
 8002010:	f000 fb36 	bl	8002680 <_sbrk>
 8002014:	1c43      	adds	r3, r0, #1
 8002016:	d103      	bne.n	8002020 <_sbrk_r+0x1c>
 8002018:	6823      	ldr	r3, [r4, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d000      	beq.n	8002020 <_sbrk_r+0x1c>
 800201e:	602b      	str	r3, [r5, #0]
 8002020:	bd70      	pop	{r4, r5, r6, pc}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	20000114 	.word	0x20000114

08002028 <__sread>:
 8002028:	b570      	push	{r4, r5, r6, lr}
 800202a:	000c      	movs	r4, r1
 800202c:	250e      	movs	r5, #14
 800202e:	5f49      	ldrsh	r1, [r1, r5]
 8002030:	f000 fac6 	bl	80025c0 <_read_r>
 8002034:	2800      	cmp	r0, #0
 8002036:	db03      	blt.n	8002040 <__sread+0x18>
 8002038:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800203a:	181b      	adds	r3, r3, r0
 800203c:	6563      	str	r3, [r4, #84]	; 0x54
 800203e:	bd70      	pop	{r4, r5, r6, pc}
 8002040:	89a3      	ldrh	r3, [r4, #12]
 8002042:	4a02      	ldr	r2, [pc, #8]	; (800204c <__sread+0x24>)
 8002044:	4013      	ands	r3, r2
 8002046:	81a3      	strh	r3, [r4, #12]
 8002048:	e7f9      	b.n	800203e <__sread+0x16>
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	ffffefff 	.word	0xffffefff

08002050 <__swrite>:
 8002050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002052:	001f      	movs	r7, r3
 8002054:	898b      	ldrh	r3, [r1, #12]
 8002056:	0005      	movs	r5, r0
 8002058:	000c      	movs	r4, r1
 800205a:	0016      	movs	r6, r2
 800205c:	05db      	lsls	r3, r3, #23
 800205e:	d505      	bpl.n	800206c <__swrite+0x1c>
 8002060:	230e      	movs	r3, #14
 8002062:	5ec9      	ldrsh	r1, [r1, r3]
 8002064:	2200      	movs	r2, #0
 8002066:	2302      	movs	r3, #2
 8002068:	f000 f9d2 	bl	8002410 <_lseek_r>
 800206c:	89a3      	ldrh	r3, [r4, #12]
 800206e:	4a05      	ldr	r2, [pc, #20]	; (8002084 <__swrite+0x34>)
 8002070:	0028      	movs	r0, r5
 8002072:	4013      	ands	r3, r2
 8002074:	81a3      	strh	r3, [r4, #12]
 8002076:	0032      	movs	r2, r6
 8002078:	230e      	movs	r3, #14
 800207a:	5ee1      	ldrsh	r1, [r4, r3]
 800207c:	003b      	movs	r3, r7
 800207e:	f000 f875 	bl	800216c <_write_r>
 8002082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002084:	ffffefff 	.word	0xffffefff

08002088 <__sseek>:
 8002088:	b570      	push	{r4, r5, r6, lr}
 800208a:	000c      	movs	r4, r1
 800208c:	250e      	movs	r5, #14
 800208e:	5f49      	ldrsh	r1, [r1, r5]
 8002090:	f000 f9be 	bl	8002410 <_lseek_r>
 8002094:	89a3      	ldrh	r3, [r4, #12]
 8002096:	1c42      	adds	r2, r0, #1
 8002098:	d103      	bne.n	80020a2 <__sseek+0x1a>
 800209a:	4a05      	ldr	r2, [pc, #20]	; (80020b0 <__sseek+0x28>)
 800209c:	4013      	ands	r3, r2
 800209e:	81a3      	strh	r3, [r4, #12]
 80020a0:	bd70      	pop	{r4, r5, r6, pc}
 80020a2:	2280      	movs	r2, #128	; 0x80
 80020a4:	0152      	lsls	r2, r2, #5
 80020a6:	4313      	orrs	r3, r2
 80020a8:	81a3      	strh	r3, [r4, #12]
 80020aa:	6560      	str	r0, [r4, #84]	; 0x54
 80020ac:	e7f8      	b.n	80020a0 <__sseek+0x18>
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	ffffefff 	.word	0xffffefff

080020b4 <__sclose>:
 80020b4:	b510      	push	{r4, lr}
 80020b6:	230e      	movs	r3, #14
 80020b8:	5ec9      	ldrsh	r1, [r1, r3]
 80020ba:	f000 f8e1 	bl	8002280 <_close_r>
 80020be:	bd10      	pop	{r4, pc}

080020c0 <__swbuf_r>:
 80020c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020c2:	0005      	movs	r5, r0
 80020c4:	000e      	movs	r6, r1
 80020c6:	0014      	movs	r4, r2
 80020c8:	2800      	cmp	r0, #0
 80020ca:	d004      	beq.n	80020d6 <__swbuf_r+0x16>
 80020cc:	6983      	ldr	r3, [r0, #24]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <__swbuf_r+0x16>
 80020d2:	f7ff fbd7 	bl	8001884 <__sinit>
 80020d6:	4b22      	ldr	r3, [pc, #136]	; (8002160 <__swbuf_r+0xa0>)
 80020d8:	429c      	cmp	r4, r3
 80020da:	d12d      	bne.n	8002138 <__swbuf_r+0x78>
 80020dc:	686c      	ldr	r4, [r5, #4]
 80020de:	69a3      	ldr	r3, [r4, #24]
 80020e0:	60a3      	str	r3, [r4, #8]
 80020e2:	89a3      	ldrh	r3, [r4, #12]
 80020e4:	071b      	lsls	r3, r3, #28
 80020e6:	d531      	bpl.n	800214c <__swbuf_r+0x8c>
 80020e8:	6923      	ldr	r3, [r4, #16]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d02e      	beq.n	800214c <__swbuf_r+0x8c>
 80020ee:	6823      	ldr	r3, [r4, #0]
 80020f0:	6922      	ldr	r2, [r4, #16]
 80020f2:	b2f7      	uxtb	r7, r6
 80020f4:	1a98      	subs	r0, r3, r2
 80020f6:	6963      	ldr	r3, [r4, #20]
 80020f8:	b2f6      	uxtb	r6, r6
 80020fa:	4298      	cmp	r0, r3
 80020fc:	db05      	blt.n	800210a <__swbuf_r+0x4a>
 80020fe:	0021      	movs	r1, r4
 8002100:	0028      	movs	r0, r5
 8002102:	f000 f959 	bl	80023b8 <_fflush_r>
 8002106:	2800      	cmp	r0, #0
 8002108:	d126      	bne.n	8002158 <__swbuf_r+0x98>
 800210a:	68a3      	ldr	r3, [r4, #8]
 800210c:	3001      	adds	r0, #1
 800210e:	3b01      	subs	r3, #1
 8002110:	60a3      	str	r3, [r4, #8]
 8002112:	6823      	ldr	r3, [r4, #0]
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	6022      	str	r2, [r4, #0]
 8002118:	701f      	strb	r7, [r3, #0]
 800211a:	6963      	ldr	r3, [r4, #20]
 800211c:	4298      	cmp	r0, r3
 800211e:	d004      	beq.n	800212a <__swbuf_r+0x6a>
 8002120:	89a3      	ldrh	r3, [r4, #12]
 8002122:	07db      	lsls	r3, r3, #31
 8002124:	d51a      	bpl.n	800215c <__swbuf_r+0x9c>
 8002126:	2e0a      	cmp	r6, #10
 8002128:	d118      	bne.n	800215c <__swbuf_r+0x9c>
 800212a:	0021      	movs	r1, r4
 800212c:	0028      	movs	r0, r5
 800212e:	f000 f943 	bl	80023b8 <_fflush_r>
 8002132:	2800      	cmp	r0, #0
 8002134:	d012      	beq.n	800215c <__swbuf_r+0x9c>
 8002136:	e00f      	b.n	8002158 <__swbuf_r+0x98>
 8002138:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <__swbuf_r+0xa4>)
 800213a:	429c      	cmp	r4, r3
 800213c:	d101      	bne.n	8002142 <__swbuf_r+0x82>
 800213e:	68ac      	ldr	r4, [r5, #8]
 8002140:	e7cd      	b.n	80020de <__swbuf_r+0x1e>
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <__swbuf_r+0xa8>)
 8002144:	429c      	cmp	r4, r3
 8002146:	d1ca      	bne.n	80020de <__swbuf_r+0x1e>
 8002148:	68ec      	ldr	r4, [r5, #12]
 800214a:	e7c8      	b.n	80020de <__swbuf_r+0x1e>
 800214c:	0021      	movs	r1, r4
 800214e:	0028      	movs	r0, r5
 8002150:	f000 f820 	bl	8002194 <__swsetup_r>
 8002154:	2800      	cmp	r0, #0
 8002156:	d0ca      	beq.n	80020ee <__swbuf_r+0x2e>
 8002158:	2601      	movs	r6, #1
 800215a:	4276      	negs	r6, r6
 800215c:	0030      	movs	r0, r6
 800215e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002160:	08002720 	.word	0x08002720
 8002164:	08002740 	.word	0x08002740
 8002168:	08002700 	.word	0x08002700

0800216c <_write_r>:
 800216c:	b570      	push	{r4, r5, r6, lr}
 800216e:	0005      	movs	r5, r0
 8002170:	0008      	movs	r0, r1
 8002172:	0011      	movs	r1, r2
 8002174:	2200      	movs	r2, #0
 8002176:	4c06      	ldr	r4, [pc, #24]	; (8002190 <_write_r+0x24>)
 8002178:	6022      	str	r2, [r4, #0]
 800217a:	001a      	movs	r2, r3
 800217c:	f7ff f9d8 	bl	8001530 <_write>
 8002180:	1c43      	adds	r3, r0, #1
 8002182:	d103      	bne.n	800218c <_write_r+0x20>
 8002184:	6823      	ldr	r3, [r4, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d000      	beq.n	800218c <_write_r+0x20>
 800218a:	602b      	str	r3, [r5, #0]
 800218c:	bd70      	pop	{r4, r5, r6, pc}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	20000114 	.word	0x20000114

08002194 <__swsetup_r>:
 8002194:	4b36      	ldr	r3, [pc, #216]	; (8002270 <__swsetup_r+0xdc>)
 8002196:	b570      	push	{r4, r5, r6, lr}
 8002198:	681d      	ldr	r5, [r3, #0]
 800219a:	0006      	movs	r6, r0
 800219c:	000c      	movs	r4, r1
 800219e:	2d00      	cmp	r5, #0
 80021a0:	d005      	beq.n	80021ae <__swsetup_r+0x1a>
 80021a2:	69ab      	ldr	r3, [r5, #24]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d102      	bne.n	80021ae <__swsetup_r+0x1a>
 80021a8:	0028      	movs	r0, r5
 80021aa:	f7ff fb6b 	bl	8001884 <__sinit>
 80021ae:	4b31      	ldr	r3, [pc, #196]	; (8002274 <__swsetup_r+0xe0>)
 80021b0:	429c      	cmp	r4, r3
 80021b2:	d10f      	bne.n	80021d4 <__swsetup_r+0x40>
 80021b4:	686c      	ldr	r4, [r5, #4]
 80021b6:	230c      	movs	r3, #12
 80021b8:	5ee2      	ldrsh	r2, [r4, r3]
 80021ba:	b293      	uxth	r3, r2
 80021bc:	0719      	lsls	r1, r3, #28
 80021be:	d42d      	bmi.n	800221c <__swsetup_r+0x88>
 80021c0:	06d9      	lsls	r1, r3, #27
 80021c2:	d411      	bmi.n	80021e8 <__swsetup_r+0x54>
 80021c4:	2309      	movs	r3, #9
 80021c6:	2001      	movs	r0, #1
 80021c8:	6033      	str	r3, [r6, #0]
 80021ca:	3337      	adds	r3, #55	; 0x37
 80021cc:	4313      	orrs	r3, r2
 80021ce:	81a3      	strh	r3, [r4, #12]
 80021d0:	4240      	negs	r0, r0
 80021d2:	bd70      	pop	{r4, r5, r6, pc}
 80021d4:	4b28      	ldr	r3, [pc, #160]	; (8002278 <__swsetup_r+0xe4>)
 80021d6:	429c      	cmp	r4, r3
 80021d8:	d101      	bne.n	80021de <__swsetup_r+0x4a>
 80021da:	68ac      	ldr	r4, [r5, #8]
 80021dc:	e7eb      	b.n	80021b6 <__swsetup_r+0x22>
 80021de:	4b27      	ldr	r3, [pc, #156]	; (800227c <__swsetup_r+0xe8>)
 80021e0:	429c      	cmp	r4, r3
 80021e2:	d1e8      	bne.n	80021b6 <__swsetup_r+0x22>
 80021e4:	68ec      	ldr	r4, [r5, #12]
 80021e6:	e7e6      	b.n	80021b6 <__swsetup_r+0x22>
 80021e8:	075b      	lsls	r3, r3, #29
 80021ea:	d513      	bpl.n	8002214 <__swsetup_r+0x80>
 80021ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80021ee:	2900      	cmp	r1, #0
 80021f0:	d008      	beq.n	8002204 <__swsetup_r+0x70>
 80021f2:	0023      	movs	r3, r4
 80021f4:	3344      	adds	r3, #68	; 0x44
 80021f6:	4299      	cmp	r1, r3
 80021f8:	d002      	beq.n	8002200 <__swsetup_r+0x6c>
 80021fa:	0030      	movs	r0, r6
 80021fc:	f000 f996 	bl	800252c <_free_r>
 8002200:	2300      	movs	r3, #0
 8002202:	6363      	str	r3, [r4, #52]	; 0x34
 8002204:	2224      	movs	r2, #36	; 0x24
 8002206:	89a3      	ldrh	r3, [r4, #12]
 8002208:	4393      	bics	r3, r2
 800220a:	81a3      	strh	r3, [r4, #12]
 800220c:	2300      	movs	r3, #0
 800220e:	6063      	str	r3, [r4, #4]
 8002210:	6923      	ldr	r3, [r4, #16]
 8002212:	6023      	str	r3, [r4, #0]
 8002214:	2308      	movs	r3, #8
 8002216:	89a2      	ldrh	r2, [r4, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	81a3      	strh	r3, [r4, #12]
 800221c:	6923      	ldr	r3, [r4, #16]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10b      	bne.n	800223a <__swsetup_r+0xa6>
 8002222:	21a0      	movs	r1, #160	; 0xa0
 8002224:	2280      	movs	r2, #128	; 0x80
 8002226:	89a3      	ldrh	r3, [r4, #12]
 8002228:	0089      	lsls	r1, r1, #2
 800222a:	0092      	lsls	r2, r2, #2
 800222c:	400b      	ands	r3, r1
 800222e:	4293      	cmp	r3, r2
 8002230:	d003      	beq.n	800223a <__swsetup_r+0xa6>
 8002232:	0021      	movs	r1, r4
 8002234:	0030      	movs	r0, r6
 8002236:	f000 f927 	bl	8002488 <__smakebuf_r>
 800223a:	2301      	movs	r3, #1
 800223c:	89a2      	ldrh	r2, [r4, #12]
 800223e:	4013      	ands	r3, r2
 8002240:	d011      	beq.n	8002266 <__swsetup_r+0xd2>
 8002242:	2300      	movs	r3, #0
 8002244:	60a3      	str	r3, [r4, #8]
 8002246:	6963      	ldr	r3, [r4, #20]
 8002248:	425b      	negs	r3, r3
 800224a:	61a3      	str	r3, [r4, #24]
 800224c:	2000      	movs	r0, #0
 800224e:	6923      	ldr	r3, [r4, #16]
 8002250:	4283      	cmp	r3, r0
 8002252:	d1be      	bne.n	80021d2 <__swsetup_r+0x3e>
 8002254:	230c      	movs	r3, #12
 8002256:	5ee2      	ldrsh	r2, [r4, r3]
 8002258:	0613      	lsls	r3, r2, #24
 800225a:	d5ba      	bpl.n	80021d2 <__swsetup_r+0x3e>
 800225c:	2340      	movs	r3, #64	; 0x40
 800225e:	4313      	orrs	r3, r2
 8002260:	81a3      	strh	r3, [r4, #12]
 8002262:	3801      	subs	r0, #1
 8002264:	e7b5      	b.n	80021d2 <__swsetup_r+0x3e>
 8002266:	0792      	lsls	r2, r2, #30
 8002268:	d400      	bmi.n	800226c <__swsetup_r+0xd8>
 800226a:	6963      	ldr	r3, [r4, #20]
 800226c:	60a3      	str	r3, [r4, #8]
 800226e:	e7ed      	b.n	800224c <__swsetup_r+0xb8>
 8002270:	20000004 	.word	0x20000004
 8002274:	08002720 	.word	0x08002720
 8002278:	08002740 	.word	0x08002740
 800227c:	08002700 	.word	0x08002700

08002280 <_close_r>:
 8002280:	2300      	movs	r3, #0
 8002282:	b570      	push	{r4, r5, r6, lr}
 8002284:	4c06      	ldr	r4, [pc, #24]	; (80022a0 <_close_r+0x20>)
 8002286:	0005      	movs	r5, r0
 8002288:	0008      	movs	r0, r1
 800228a:	6023      	str	r3, [r4, #0]
 800228c:	f000 f9d0 	bl	8002630 <_close>
 8002290:	1c43      	adds	r3, r0, #1
 8002292:	d103      	bne.n	800229c <_close_r+0x1c>
 8002294:	6823      	ldr	r3, [r4, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d000      	beq.n	800229c <_close_r+0x1c>
 800229a:	602b      	str	r3, [r5, #0]
 800229c:	bd70      	pop	{r4, r5, r6, pc}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	20000114 	.word	0x20000114

080022a4 <__sflush_r>:
 80022a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022a6:	898a      	ldrh	r2, [r1, #12]
 80022a8:	0005      	movs	r5, r0
 80022aa:	000c      	movs	r4, r1
 80022ac:	0713      	lsls	r3, r2, #28
 80022ae:	d460      	bmi.n	8002372 <__sflush_r+0xce>
 80022b0:	684b      	ldr	r3, [r1, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	dc04      	bgt.n	80022c0 <__sflush_r+0x1c>
 80022b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	dc01      	bgt.n	80022c0 <__sflush_r+0x1c>
 80022bc:	2000      	movs	r0, #0
 80022be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80022c0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80022c2:	2f00      	cmp	r7, #0
 80022c4:	d0fa      	beq.n	80022bc <__sflush_r+0x18>
 80022c6:	2300      	movs	r3, #0
 80022c8:	682e      	ldr	r6, [r5, #0]
 80022ca:	602b      	str	r3, [r5, #0]
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	015b      	lsls	r3, r3, #5
 80022d0:	401a      	ands	r2, r3
 80022d2:	d034      	beq.n	800233e <__sflush_r+0x9a>
 80022d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80022d6:	89a3      	ldrh	r3, [r4, #12]
 80022d8:	075b      	lsls	r3, r3, #29
 80022da:	d506      	bpl.n	80022ea <__sflush_r+0x46>
 80022dc:	6863      	ldr	r3, [r4, #4]
 80022de:	1ac0      	subs	r0, r0, r3
 80022e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <__sflush_r+0x46>
 80022e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022e8:	1ac0      	subs	r0, r0, r3
 80022ea:	0002      	movs	r2, r0
 80022ec:	6a21      	ldr	r1, [r4, #32]
 80022ee:	2300      	movs	r3, #0
 80022f0:	0028      	movs	r0, r5
 80022f2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80022f4:	47b8      	blx	r7
 80022f6:	89a1      	ldrh	r1, [r4, #12]
 80022f8:	1c43      	adds	r3, r0, #1
 80022fa:	d106      	bne.n	800230a <__sflush_r+0x66>
 80022fc:	682b      	ldr	r3, [r5, #0]
 80022fe:	2b1d      	cmp	r3, #29
 8002300:	d831      	bhi.n	8002366 <__sflush_r+0xc2>
 8002302:	4a2c      	ldr	r2, [pc, #176]	; (80023b4 <__sflush_r+0x110>)
 8002304:	40da      	lsrs	r2, r3
 8002306:	07d3      	lsls	r3, r2, #31
 8002308:	d52d      	bpl.n	8002366 <__sflush_r+0xc2>
 800230a:	2300      	movs	r3, #0
 800230c:	6063      	str	r3, [r4, #4]
 800230e:	6923      	ldr	r3, [r4, #16]
 8002310:	6023      	str	r3, [r4, #0]
 8002312:	04cb      	lsls	r3, r1, #19
 8002314:	d505      	bpl.n	8002322 <__sflush_r+0x7e>
 8002316:	1c43      	adds	r3, r0, #1
 8002318:	d102      	bne.n	8002320 <__sflush_r+0x7c>
 800231a:	682b      	ldr	r3, [r5, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d100      	bne.n	8002322 <__sflush_r+0x7e>
 8002320:	6560      	str	r0, [r4, #84]	; 0x54
 8002322:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002324:	602e      	str	r6, [r5, #0]
 8002326:	2900      	cmp	r1, #0
 8002328:	d0c8      	beq.n	80022bc <__sflush_r+0x18>
 800232a:	0023      	movs	r3, r4
 800232c:	3344      	adds	r3, #68	; 0x44
 800232e:	4299      	cmp	r1, r3
 8002330:	d002      	beq.n	8002338 <__sflush_r+0x94>
 8002332:	0028      	movs	r0, r5
 8002334:	f000 f8fa 	bl	800252c <_free_r>
 8002338:	2000      	movs	r0, #0
 800233a:	6360      	str	r0, [r4, #52]	; 0x34
 800233c:	e7bf      	b.n	80022be <__sflush_r+0x1a>
 800233e:	2301      	movs	r3, #1
 8002340:	6a21      	ldr	r1, [r4, #32]
 8002342:	0028      	movs	r0, r5
 8002344:	47b8      	blx	r7
 8002346:	1c43      	adds	r3, r0, #1
 8002348:	d1c5      	bne.n	80022d6 <__sflush_r+0x32>
 800234a:	682b      	ldr	r3, [r5, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0c2      	beq.n	80022d6 <__sflush_r+0x32>
 8002350:	2b1d      	cmp	r3, #29
 8002352:	d001      	beq.n	8002358 <__sflush_r+0xb4>
 8002354:	2b16      	cmp	r3, #22
 8002356:	d101      	bne.n	800235c <__sflush_r+0xb8>
 8002358:	602e      	str	r6, [r5, #0]
 800235a:	e7af      	b.n	80022bc <__sflush_r+0x18>
 800235c:	2340      	movs	r3, #64	; 0x40
 800235e:	89a2      	ldrh	r2, [r4, #12]
 8002360:	4313      	orrs	r3, r2
 8002362:	81a3      	strh	r3, [r4, #12]
 8002364:	e7ab      	b.n	80022be <__sflush_r+0x1a>
 8002366:	2340      	movs	r3, #64	; 0x40
 8002368:	430b      	orrs	r3, r1
 800236a:	2001      	movs	r0, #1
 800236c:	81a3      	strh	r3, [r4, #12]
 800236e:	4240      	negs	r0, r0
 8002370:	e7a5      	b.n	80022be <__sflush_r+0x1a>
 8002372:	690f      	ldr	r7, [r1, #16]
 8002374:	2f00      	cmp	r7, #0
 8002376:	d0a1      	beq.n	80022bc <__sflush_r+0x18>
 8002378:	680b      	ldr	r3, [r1, #0]
 800237a:	600f      	str	r7, [r1, #0]
 800237c:	1bdb      	subs	r3, r3, r7
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	2300      	movs	r3, #0
 8002382:	0792      	lsls	r2, r2, #30
 8002384:	d100      	bne.n	8002388 <__sflush_r+0xe4>
 8002386:	694b      	ldr	r3, [r1, #20]
 8002388:	60a3      	str	r3, [r4, #8]
 800238a:	9b01      	ldr	r3, [sp, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	dc00      	bgt.n	8002392 <__sflush_r+0xee>
 8002390:	e794      	b.n	80022bc <__sflush_r+0x18>
 8002392:	9b01      	ldr	r3, [sp, #4]
 8002394:	003a      	movs	r2, r7
 8002396:	6a21      	ldr	r1, [r4, #32]
 8002398:	0028      	movs	r0, r5
 800239a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800239c:	47b0      	blx	r6
 800239e:	2800      	cmp	r0, #0
 80023a0:	dc03      	bgt.n	80023aa <__sflush_r+0x106>
 80023a2:	2340      	movs	r3, #64	; 0x40
 80023a4:	89a2      	ldrh	r2, [r4, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	e7df      	b.n	800236a <__sflush_r+0xc6>
 80023aa:	9b01      	ldr	r3, [sp, #4]
 80023ac:	183f      	adds	r7, r7, r0
 80023ae:	1a1b      	subs	r3, r3, r0
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	e7ea      	b.n	800238a <__sflush_r+0xe6>
 80023b4:	20400001 	.word	0x20400001

080023b8 <_fflush_r>:
 80023b8:	690b      	ldr	r3, [r1, #16]
 80023ba:	b570      	push	{r4, r5, r6, lr}
 80023bc:	0005      	movs	r5, r0
 80023be:	000c      	movs	r4, r1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <_fflush_r+0x10>
 80023c4:	2000      	movs	r0, #0
 80023c6:	bd70      	pop	{r4, r5, r6, pc}
 80023c8:	2800      	cmp	r0, #0
 80023ca:	d004      	beq.n	80023d6 <_fflush_r+0x1e>
 80023cc:	6983      	ldr	r3, [r0, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <_fflush_r+0x1e>
 80023d2:	f7ff fa57 	bl	8001884 <__sinit>
 80023d6:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <_fflush_r+0x4c>)
 80023d8:	429c      	cmp	r4, r3
 80023da:	d109      	bne.n	80023f0 <_fflush_r+0x38>
 80023dc:	686c      	ldr	r4, [r5, #4]
 80023de:	220c      	movs	r2, #12
 80023e0:	5ea3      	ldrsh	r3, [r4, r2]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0ee      	beq.n	80023c4 <_fflush_r+0xc>
 80023e6:	0021      	movs	r1, r4
 80023e8:	0028      	movs	r0, r5
 80023ea:	f7ff ff5b 	bl	80022a4 <__sflush_r>
 80023ee:	e7ea      	b.n	80023c6 <_fflush_r+0xe>
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <_fflush_r+0x50>)
 80023f2:	429c      	cmp	r4, r3
 80023f4:	d101      	bne.n	80023fa <_fflush_r+0x42>
 80023f6:	68ac      	ldr	r4, [r5, #8]
 80023f8:	e7f1      	b.n	80023de <_fflush_r+0x26>
 80023fa:	4b04      	ldr	r3, [pc, #16]	; (800240c <_fflush_r+0x54>)
 80023fc:	429c      	cmp	r4, r3
 80023fe:	d1ee      	bne.n	80023de <_fflush_r+0x26>
 8002400:	68ec      	ldr	r4, [r5, #12]
 8002402:	e7ec      	b.n	80023de <_fflush_r+0x26>
 8002404:	08002720 	.word	0x08002720
 8002408:	08002740 	.word	0x08002740
 800240c:	08002700 	.word	0x08002700

08002410 <_lseek_r>:
 8002410:	b570      	push	{r4, r5, r6, lr}
 8002412:	0005      	movs	r5, r0
 8002414:	0008      	movs	r0, r1
 8002416:	0011      	movs	r1, r2
 8002418:	2200      	movs	r2, #0
 800241a:	4c06      	ldr	r4, [pc, #24]	; (8002434 <_lseek_r+0x24>)
 800241c:	6022      	str	r2, [r4, #0]
 800241e:	001a      	movs	r2, r3
 8002420:	f000 f91e 	bl	8002660 <_lseek>
 8002424:	1c43      	adds	r3, r0, #1
 8002426:	d103      	bne.n	8002430 <_lseek_r+0x20>
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d000      	beq.n	8002430 <_lseek_r+0x20>
 800242e:	602b      	str	r3, [r5, #0]
 8002430:	bd70      	pop	{r4, r5, r6, pc}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	20000114 	.word	0x20000114

08002438 <__swhatbuf_r>:
 8002438:	b570      	push	{r4, r5, r6, lr}
 800243a:	000e      	movs	r6, r1
 800243c:	001d      	movs	r5, r3
 800243e:	230e      	movs	r3, #14
 8002440:	5ec9      	ldrsh	r1, [r1, r3]
 8002442:	b090      	sub	sp, #64	; 0x40
 8002444:	0014      	movs	r4, r2
 8002446:	2900      	cmp	r1, #0
 8002448:	da07      	bge.n	800245a <__swhatbuf_r+0x22>
 800244a:	2300      	movs	r3, #0
 800244c:	602b      	str	r3, [r5, #0]
 800244e:	89b3      	ldrh	r3, [r6, #12]
 8002450:	061b      	lsls	r3, r3, #24
 8002452:	d411      	bmi.n	8002478 <__swhatbuf_r+0x40>
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	e00f      	b.n	800247a <__swhatbuf_r+0x42>
 800245a:	aa01      	add	r2, sp, #4
 800245c:	f000 f8c4 	bl	80025e8 <_fstat_r>
 8002460:	2800      	cmp	r0, #0
 8002462:	dbf2      	blt.n	800244a <__swhatbuf_r+0x12>
 8002464:	22f0      	movs	r2, #240	; 0xf0
 8002466:	9b02      	ldr	r3, [sp, #8]
 8002468:	0212      	lsls	r2, r2, #8
 800246a:	4013      	ands	r3, r2
 800246c:	4a05      	ldr	r2, [pc, #20]	; (8002484 <__swhatbuf_r+0x4c>)
 800246e:	189b      	adds	r3, r3, r2
 8002470:	425a      	negs	r2, r3
 8002472:	4153      	adcs	r3, r2
 8002474:	602b      	str	r3, [r5, #0]
 8002476:	e7ed      	b.n	8002454 <__swhatbuf_r+0x1c>
 8002478:	2340      	movs	r3, #64	; 0x40
 800247a:	2000      	movs	r0, #0
 800247c:	6023      	str	r3, [r4, #0]
 800247e:	b010      	add	sp, #64	; 0x40
 8002480:	bd70      	pop	{r4, r5, r6, pc}
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	ffffe000 	.word	0xffffe000

08002488 <__smakebuf_r>:
 8002488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800248a:	2602      	movs	r6, #2
 800248c:	898b      	ldrh	r3, [r1, #12]
 800248e:	0005      	movs	r5, r0
 8002490:	000c      	movs	r4, r1
 8002492:	4233      	tst	r3, r6
 8002494:	d006      	beq.n	80024a4 <__smakebuf_r+0x1c>
 8002496:	0023      	movs	r3, r4
 8002498:	3347      	adds	r3, #71	; 0x47
 800249a:	6023      	str	r3, [r4, #0]
 800249c:	6123      	str	r3, [r4, #16]
 800249e:	2301      	movs	r3, #1
 80024a0:	6163      	str	r3, [r4, #20]
 80024a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80024a4:	ab01      	add	r3, sp, #4
 80024a6:	466a      	mov	r2, sp
 80024a8:	f7ff ffc6 	bl	8002438 <__swhatbuf_r>
 80024ac:	9900      	ldr	r1, [sp, #0]
 80024ae:	0007      	movs	r7, r0
 80024b0:	0028      	movs	r0, r5
 80024b2:	f7ff fa7d 	bl	80019b0 <_malloc_r>
 80024b6:	2800      	cmp	r0, #0
 80024b8:	d108      	bne.n	80024cc <__smakebuf_r+0x44>
 80024ba:	220c      	movs	r2, #12
 80024bc:	5ea3      	ldrsh	r3, [r4, r2]
 80024be:	059a      	lsls	r2, r3, #22
 80024c0:	d4ef      	bmi.n	80024a2 <__smakebuf_r+0x1a>
 80024c2:	2203      	movs	r2, #3
 80024c4:	4393      	bics	r3, r2
 80024c6:	431e      	orrs	r6, r3
 80024c8:	81a6      	strh	r6, [r4, #12]
 80024ca:	e7e4      	b.n	8002496 <__smakebuf_r+0xe>
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <__smakebuf_r+0x84>)
 80024ce:	62ab      	str	r3, [r5, #40]	; 0x28
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	89a2      	ldrh	r2, [r4, #12]
 80024d4:	6020      	str	r0, [r4, #0]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	81a3      	strh	r3, [r4, #12]
 80024da:	9b00      	ldr	r3, [sp, #0]
 80024dc:	6120      	str	r0, [r4, #16]
 80024de:	6163      	str	r3, [r4, #20]
 80024e0:	9b01      	ldr	r3, [sp, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00d      	beq.n	8002502 <__smakebuf_r+0x7a>
 80024e6:	230e      	movs	r3, #14
 80024e8:	5ee1      	ldrsh	r1, [r4, r3]
 80024ea:	0028      	movs	r0, r5
 80024ec:	f000 f88e 	bl	800260c <_isatty_r>
 80024f0:	2800      	cmp	r0, #0
 80024f2:	d006      	beq.n	8002502 <__smakebuf_r+0x7a>
 80024f4:	2203      	movs	r2, #3
 80024f6:	89a3      	ldrh	r3, [r4, #12]
 80024f8:	4393      	bics	r3, r2
 80024fa:	001a      	movs	r2, r3
 80024fc:	2301      	movs	r3, #1
 80024fe:	4313      	orrs	r3, r2
 8002500:	81a3      	strh	r3, [r4, #12]
 8002502:	89a0      	ldrh	r0, [r4, #12]
 8002504:	4338      	orrs	r0, r7
 8002506:	81a0      	strh	r0, [r4, #12]
 8002508:	e7cb      	b.n	80024a2 <__smakebuf_r+0x1a>
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	08001801 	.word	0x08001801

08002510 <memchr>:
 8002510:	b2c9      	uxtb	r1, r1
 8002512:	1882      	adds	r2, r0, r2
 8002514:	4290      	cmp	r0, r2
 8002516:	d101      	bne.n	800251c <memchr+0xc>
 8002518:	2000      	movs	r0, #0
 800251a:	4770      	bx	lr
 800251c:	7803      	ldrb	r3, [r0, #0]
 800251e:	428b      	cmp	r3, r1
 8002520:	d0fb      	beq.n	800251a <memchr+0xa>
 8002522:	3001      	adds	r0, #1
 8002524:	e7f6      	b.n	8002514 <memchr+0x4>

08002526 <__malloc_lock>:
 8002526:	4770      	bx	lr

08002528 <__malloc_unlock>:
 8002528:	4770      	bx	lr
	...

0800252c <_free_r>:
 800252c:	b570      	push	{r4, r5, r6, lr}
 800252e:	0005      	movs	r5, r0
 8002530:	2900      	cmp	r1, #0
 8002532:	d010      	beq.n	8002556 <_free_r+0x2a>
 8002534:	1f0c      	subs	r4, r1, #4
 8002536:	6823      	ldr	r3, [r4, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	da00      	bge.n	800253e <_free_r+0x12>
 800253c:	18e4      	adds	r4, r4, r3
 800253e:	0028      	movs	r0, r5
 8002540:	f7ff fff1 	bl	8002526 <__malloc_lock>
 8002544:	4a1d      	ldr	r2, [pc, #116]	; (80025bc <_free_r+0x90>)
 8002546:	6813      	ldr	r3, [r2, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d105      	bne.n	8002558 <_free_r+0x2c>
 800254c:	6063      	str	r3, [r4, #4]
 800254e:	6014      	str	r4, [r2, #0]
 8002550:	0028      	movs	r0, r5
 8002552:	f7ff ffe9 	bl	8002528 <__malloc_unlock>
 8002556:	bd70      	pop	{r4, r5, r6, pc}
 8002558:	42a3      	cmp	r3, r4
 800255a:	d909      	bls.n	8002570 <_free_r+0x44>
 800255c:	6821      	ldr	r1, [r4, #0]
 800255e:	1860      	adds	r0, r4, r1
 8002560:	4283      	cmp	r3, r0
 8002562:	d1f3      	bne.n	800254c <_free_r+0x20>
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	1841      	adds	r1, r0, r1
 800256a:	6021      	str	r1, [r4, #0]
 800256c:	e7ee      	b.n	800254c <_free_r+0x20>
 800256e:	0013      	movs	r3, r2
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	2a00      	cmp	r2, #0
 8002574:	d001      	beq.n	800257a <_free_r+0x4e>
 8002576:	42a2      	cmp	r2, r4
 8002578:	d9f9      	bls.n	800256e <_free_r+0x42>
 800257a:	6819      	ldr	r1, [r3, #0]
 800257c:	1858      	adds	r0, r3, r1
 800257e:	42a0      	cmp	r0, r4
 8002580:	d10b      	bne.n	800259a <_free_r+0x6e>
 8002582:	6820      	ldr	r0, [r4, #0]
 8002584:	1809      	adds	r1, r1, r0
 8002586:	1858      	adds	r0, r3, r1
 8002588:	6019      	str	r1, [r3, #0]
 800258a:	4282      	cmp	r2, r0
 800258c:	d1e0      	bne.n	8002550 <_free_r+0x24>
 800258e:	6810      	ldr	r0, [r2, #0]
 8002590:	6852      	ldr	r2, [r2, #4]
 8002592:	1841      	adds	r1, r0, r1
 8002594:	6019      	str	r1, [r3, #0]
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	e7da      	b.n	8002550 <_free_r+0x24>
 800259a:	42a0      	cmp	r0, r4
 800259c:	d902      	bls.n	80025a4 <_free_r+0x78>
 800259e:	230c      	movs	r3, #12
 80025a0:	602b      	str	r3, [r5, #0]
 80025a2:	e7d5      	b.n	8002550 <_free_r+0x24>
 80025a4:	6821      	ldr	r1, [r4, #0]
 80025a6:	1860      	adds	r0, r4, r1
 80025a8:	4282      	cmp	r2, r0
 80025aa:	d103      	bne.n	80025b4 <_free_r+0x88>
 80025ac:	6810      	ldr	r0, [r2, #0]
 80025ae:	6852      	ldr	r2, [r2, #4]
 80025b0:	1841      	adds	r1, r0, r1
 80025b2:	6021      	str	r1, [r4, #0]
 80025b4:	6062      	str	r2, [r4, #4]
 80025b6:	605c      	str	r4, [r3, #4]
 80025b8:	e7ca      	b.n	8002550 <_free_r+0x24>
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	20000084 	.word	0x20000084

080025c0 <_read_r>:
 80025c0:	b570      	push	{r4, r5, r6, lr}
 80025c2:	0005      	movs	r5, r0
 80025c4:	0008      	movs	r0, r1
 80025c6:	0011      	movs	r1, r2
 80025c8:	2200      	movs	r2, #0
 80025ca:	4c06      	ldr	r4, [pc, #24]	; (80025e4 <_read_r+0x24>)
 80025cc:	6022      	str	r2, [r4, #0]
 80025ce:	001a      	movs	r2, r3
 80025d0:	f000 f84e 	bl	8002670 <_read>
 80025d4:	1c43      	adds	r3, r0, #1
 80025d6:	d103      	bne.n	80025e0 <_read_r+0x20>
 80025d8:	6823      	ldr	r3, [r4, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d000      	beq.n	80025e0 <_read_r+0x20>
 80025de:	602b      	str	r3, [r5, #0]
 80025e0:	bd70      	pop	{r4, r5, r6, pc}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	20000114 	.word	0x20000114

080025e8 <_fstat_r>:
 80025e8:	2300      	movs	r3, #0
 80025ea:	b570      	push	{r4, r5, r6, lr}
 80025ec:	4c06      	ldr	r4, [pc, #24]	; (8002608 <_fstat_r+0x20>)
 80025ee:	0005      	movs	r5, r0
 80025f0:	0008      	movs	r0, r1
 80025f2:	0011      	movs	r1, r2
 80025f4:	6023      	str	r3, [r4, #0]
 80025f6:	f000 f823 	bl	8002640 <_fstat>
 80025fa:	1c43      	adds	r3, r0, #1
 80025fc:	d103      	bne.n	8002606 <_fstat_r+0x1e>
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d000      	beq.n	8002606 <_fstat_r+0x1e>
 8002604:	602b      	str	r3, [r5, #0]
 8002606:	bd70      	pop	{r4, r5, r6, pc}
 8002608:	20000114 	.word	0x20000114

0800260c <_isatty_r>:
 800260c:	2300      	movs	r3, #0
 800260e:	b570      	push	{r4, r5, r6, lr}
 8002610:	4c06      	ldr	r4, [pc, #24]	; (800262c <_isatty_r+0x20>)
 8002612:	0005      	movs	r5, r0
 8002614:	0008      	movs	r0, r1
 8002616:	6023      	str	r3, [r4, #0]
 8002618:	f000 f81a 	bl	8002650 <_isatty>
 800261c:	1c43      	adds	r3, r0, #1
 800261e:	d103      	bne.n	8002628 <_isatty_r+0x1c>
 8002620:	6823      	ldr	r3, [r4, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d000      	beq.n	8002628 <_isatty_r+0x1c>
 8002626:	602b      	str	r3, [r5, #0]
 8002628:	bd70      	pop	{r4, r5, r6, pc}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	20000114 	.word	0x20000114

08002630 <_close>:
 8002630:	2258      	movs	r2, #88	; 0x58
 8002632:	2001      	movs	r0, #1
 8002634:	4b01      	ldr	r3, [pc, #4]	; (800263c <_close+0xc>)
 8002636:	4240      	negs	r0, r0
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	4770      	bx	lr
 800263c:	20000114 	.word	0x20000114

08002640 <_fstat>:
 8002640:	2258      	movs	r2, #88	; 0x58
 8002642:	2001      	movs	r0, #1
 8002644:	4b01      	ldr	r3, [pc, #4]	; (800264c <_fstat+0xc>)
 8002646:	4240      	negs	r0, r0
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	4770      	bx	lr
 800264c:	20000114 	.word	0x20000114

08002650 <_isatty>:
 8002650:	2258      	movs	r2, #88	; 0x58
 8002652:	4b02      	ldr	r3, [pc, #8]	; (800265c <_isatty+0xc>)
 8002654:	2000      	movs	r0, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	4770      	bx	lr
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	20000114 	.word	0x20000114

08002660 <_lseek>:
 8002660:	2258      	movs	r2, #88	; 0x58
 8002662:	2001      	movs	r0, #1
 8002664:	4b01      	ldr	r3, [pc, #4]	; (800266c <_lseek+0xc>)
 8002666:	4240      	negs	r0, r0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	4770      	bx	lr
 800266c:	20000114 	.word	0x20000114

08002670 <_read>:
 8002670:	2258      	movs	r2, #88	; 0x58
 8002672:	2001      	movs	r0, #1
 8002674:	4b01      	ldr	r3, [pc, #4]	; (800267c <_read+0xc>)
 8002676:	4240      	negs	r0, r0
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	4770      	bx	lr
 800267c:	20000114 	.word	0x20000114

08002680 <_sbrk>:
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <_sbrk+0x18>)
 8002682:	0002      	movs	r2, r0
 8002684:	6819      	ldr	r1, [r3, #0]
 8002686:	2900      	cmp	r1, #0
 8002688:	d101      	bne.n	800268e <_sbrk+0xe>
 800268a:	4904      	ldr	r1, [pc, #16]	; (800269c <_sbrk+0x1c>)
 800268c:	6019      	str	r1, [r3, #0]
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	1882      	adds	r2, r0, r2
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	4770      	bx	lr
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	2000008c 	.word	0x2000008c
 800269c:	20000118 	.word	0x20000118

080026a0 <_init>:
 80026a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026a6:	bc08      	pop	{r3}
 80026a8:	469e      	mov	lr, r3
 80026aa:	4770      	bx	lr

080026ac <_fini>:
 80026ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026b2:	bc08      	pop	{r3}
 80026b4:	469e      	mov	lr, r3
 80026b6:	4770      	bx	lr
